
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace order1_model_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 40> locations_array__ = 
{" (found before start of program)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 13, column 2 to column 21)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 14, column 2 to column 22)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 18, column 1 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 19, column 1 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 39, column 2 to column 21)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 40, column 2 to column 19)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 44, column 6 to column 13)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 46, column 15 to column 48)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 45, column 26 to line 47, column 15)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 45, column 10 to line 47, column 15)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 43, column 18 to line 48, column 4)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 43, column 2 to line 48, column 4)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 51, column 2 to column 50)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 50, column 17 to line 52, column 3)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 50, column 2 to line 52, column 3)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 55, column 2 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 58, column 3 to column 38)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 57, column 17 to line 59, column 3)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 57, column 2 to line 59, column 3)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 24, column 8 to column 10)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 24, column 2 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 26, column 6 to column 13)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 28, column 15 to column 48)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 27, column 26 to line 29, column 15)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 27, column 10 to line 29, column 15)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 25, column 18 to line 30, column 4)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 25, column 2 to line 30, column 4)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 34, column 2 to column 26)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 2, column 2 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 3, column 8 to column 10)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 3, column 2 to column 19)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 4, column 8 to column 10)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 4, column 2 to column 22)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 8, column 2 to column 8)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 9, column 2 to column 6)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 13, column 8 to column 11)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 39, column 9 to column 11)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 40, column 8 to column 10)",
 " (in '/home/tng/Documents/PremiersEssais/RegressionExample/PolynomialReg/models/order1_model.stan', line 55, column 8 to column 10)"};




class order1_model_model final : public model_base_crtp<order1_model_model> {

 private:
  int nt;
  std::vector<double> t;
  std::vector<double> yobs;
  int n;
  int p_1dim__; 
  
 
 public:
  ~order1_model_model() { }
  
  inline std::string model_name() const final { return "order1_model_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = "};
  }
  
  
  order1_model_model(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "order1_model_model_namespace::order1_model_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 29;
      context__.validate_dims("data initialization","nt","int",
           std::vector<size_t>{});
      nt = std::numeric_limits<int>::min();
      
      
      current_statement__ = 29;
      nt = context__.vals_i("nt")[(1 - 1)];
      current_statement__ = 30;
      stan::math::validate_non_negative_index("t", "nt", nt);
      current_statement__ = 31;
      context__.validate_dims("data initialization","t","double",
           std::vector<size_t>{static_cast<size_t>(nt)});
      t = std::vector<double>(nt, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 31;
      t = context__.vals_r("t");
      current_statement__ = 32;
      stan::math::validate_non_negative_index("yobs", "nt", nt);
      current_statement__ = 33;
      context__.validate_dims("data initialization","yobs","double",
           std::vector<size_t>{static_cast<size_t>(nt)});
      yobs = 
        std::vector<double>(nt, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 33;
      yobs = context__.vals_r("yobs");
      current_statement__ = 34;
      n = std::numeric_limits<int>::min();
      
      
      current_statement__ = 35;
      n = 1;
      current_statement__ = 36;
      p_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 36;
      p_1dim__ = (n + 1);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("p", "n + 1", p_1dim__);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("log_lik", "nt", nt);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("y", "nt", nt);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("y_rep", "nt", nt);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = p_1dim__ + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "order1_model_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> p =
         std::vector<local_scalar_t__>(p_1dim__, DUMMY_VAR__);
      current_statement__ = 1;
      p = in__.template read<std::vector<local_scalar_t__>>(p_1dim__);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ beta0 = DUMMY_VAR__;
      current_statement__ = 3;
      beta0 = stan::model::rvalue(p, "p", stan::model::index_uni(1));
      local_scalar_t__ beta1 = DUMMY_VAR__;
      current_statement__ = 4;
      beta1 = stan::model::rvalue(p, "p", stan::model::index_uni(2));
      {
        current_statement__ = 20;
        stan::math::validate_non_negative_index("y", "nt", nt);
        std::vector<local_scalar_t__> y =
           std::vector<local_scalar_t__>(nt, DUMMY_VAR__);
        current_statement__ = 27;
        for (int i = 1; i <= nt; ++i) {
          current_statement__ = 22;
          stan::model::assign(y, 0,
            "assigning variable y", stan::model::index_uni(i));
          current_statement__ = 25;
          for (int j = 1; j <= (n + 1); ++j) {
            current_statement__ = 23;
            stan::model::assign(y,
              (stan::model::rvalue(y, "y", stan::model::index_uni(i)) +
                (stan::model::rvalue(p, "p", stan::model::index_uni(j)) *
                  stan::math::pow(
                    stan::model::rvalue(t, "t", stan::model::index_uni(i)),
                    (j - 1)))),
              "assigning variable y", stan::model::index_uni(i));
          }
        }
        current_statement__ = 28;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(yobs, y, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "order1_model_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<double> p =
         std::vector<double>(p_1dim__, 
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      p = in__.template read<std::vector<local_scalar_t__>>(p_1dim__);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double beta0 = std::numeric_limits<double>::quiet_NaN();
      double beta1 = std::numeric_limits<double>::quiet_NaN();
      out__.write(p);
      out__.write(sigma);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 3;
      beta0 = stan::model::rvalue(p, "p", stan::model::index_uni(1));
      current_statement__ = 4;
      beta1 = stan::model::rvalue(p, "p", stan::model::index_uni(2));
      if (emit_transformed_parameters__) {
        out__.write(beta0);
        out__.write(beta1);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> log_lik =
         Eigen::Matrix<double, -1, 1>::Constant(nt,
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> y =
         std::vector<double>(nt, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      for (int i = 1; i <= nt; ++i) {
        current_statement__ = 7;
        stan::model::assign(y, 0,
          "assigning variable y", stan::model::index_uni(i));
        current_statement__ = 10;
        for (int j = 1; j <= (n + 1); ++j) {
          current_statement__ = 8;
          stan::model::assign(y,
            (stan::model::rvalue(y, "y", stan::model::index_uni(i)) +
              (stan::model::rvalue(p, "p", stan::model::index_uni(j)) *
                stan::math::pow(
                  stan::model::rvalue(t, "t", stan::model::index_uni(i)),
                  (j - 1)))),
            "assigning variable y", stan::model::index_uni(i));
        }
      }
      current_statement__ = 15;
      for (int i = 1; i <= nt; ++i) {
        current_statement__ = 13;
        stan::model::assign(log_lik,
          stan::math::normal_lpdf<false>(
            stan::model::rvalue(yobs, "yobs", stan::model::index_uni(i)),
            stan::model::rvalue(y, "y", stan::model::index_uni(i)), sigma),
          "assigning variable log_lik", stan::model::index_uni(i));
      }
      std::vector<double> y_rep =
         std::vector<double>(nt, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 19;
      for (int i = 1; i <= nt; ++i) {
        current_statement__ = 17;
        stan::model::assign(y_rep,
          stan::math::normal_rng(
            stan::model::rvalue(y, "y", stan::model::index_uni(i)), sigma,
            base_rng__),
          "assigning variable y_rep", stan::model::index_uni(i));
      }
      out__.write(log_lik);
      out__.write(y);
      out__.write(y_rep);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> p =
         std::vector<local_scalar_t__>(p_1dim__, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= p_1dim__; ++sym1__) {
        p[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(p);
      local_scalar_t__ sigma = DUMMY_VAR__;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"p", "sigma", "beta0", "beta1",
      "log_lik", "y", "y_rep"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(p_1dim__)
                                                                   },
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(nt)},
      std::vector<size_t>{static_cast<size_t>(nt)},
      std::vector<size_t>{static_cast<size_t>(nt)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= p_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "beta0");
      param_names__.emplace_back(std::string() + "beta1");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_rep" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= p_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "beta0");
      param_names__.emplace_back(std::string() + "beta1");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_rep" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(p_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"beta1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nt) + "},\"block\":\"generated_quantities\"},{\"name\":\"y\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nt) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nt) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(p_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"beta1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nt) + "},\"block\":\"generated_quantities\"},{\"name\":\"y\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nt) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nt) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (p_1dim__ + 1);
      const size_t num_transformed = (1 + 1);
      const size_t num_gen_quantities = 
  ((nt + nt) + nt);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (p_1dim__ + 1);
      const size_t num_transformed = (1 + 1);
      const size_t num_gen_quantities = 
  ((nt + nt) + nt);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 2> names__{"p", "sigma"};
      const std::array<Eigen::Index, 2> constrain_param_sizes__{p_1dim__, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = order1_model_model_namespace::order1_model_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return order1_model_model_namespace::profiles__;
}

#endif


