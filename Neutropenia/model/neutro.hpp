
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace neutro4_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 168> locations_array__ = 
{" (found before start of program)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 172, column 1 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 173, column 1 to column 23)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 174, column 1 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 175, column 1 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 176, column 1 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 177, column 1 to column 27)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 180, column 1 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 181, column 1 to column 27)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 182, column 1 to column 27)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 183, column 1 to column 27)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 184, column 1 to column 31)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 191, column 3 to column 21)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 193, column 3 to column 35)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 194, column 3 to column 42)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 196, column 1 to column 85)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 197, column 1 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 199, column 3 to column 41)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 200, column 1 to column 47)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 192, column 3 to column 67)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 198, column 3 to column 76)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 232, column 1 to column 19)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 233, column 2 to column 23)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 240, column 3 to column 77)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 239, column 7 to line 241, column 6)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 237, column 3 to column 17)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 236, column 22 to line 238, column 6)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 236, column 5 to line 241, column 6)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 242, column 5 to column 89)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 235, column 17 to line 243, column 3)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 235, column 1 to line 243, column 3)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 208, column 1 to column 44)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 209, column 1 to column 41)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 210, column 1 to column 44)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 211, column 1 to column 44)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 212, column 1 to column 44)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 213, column 1 to column 23)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 216, column 1 to column 42)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 219, column 1 to column 47)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 220, column 1 to column 53)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 221, column 1 to column 53)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 222, column 1 to column 53)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 223, column 1 to column 28)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 226, column 1 to column 79)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 126, column 1 to column 8)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 127, column 7 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 127, column 1 to column 21)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 128, column 1 to column 13)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 129, column 1 to column 13)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 130, column 7 to column 13)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 130, column 1 to column 26)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 131, column 7 to column 13)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 131, column 1 to column 26)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 133, column 7 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 133, column 1 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 134, column 7 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 134, column 1 to column 19)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 135, column 7 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 135, column 1 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 136, column 7 to column 13)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 136, column 1 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 137, column 7 to column 13)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 137, column 1 to column 29)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 139, column 1 to column 17)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 140, column 1 to column 19)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 141, column 1 to column 14)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 142, column 1 to column 16)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 143, column 1 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 144, column 1 to column 19)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 145, column 1 to column 17)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 146, column 1 to column 19)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 147, column 1 to column 15)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 148, column 1 to column 16)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 149, column 1 to column 15)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 150, column 1 to column 17)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 151, column 1 to column 13)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 152, column 1 to column 15)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 153, column 1 to column 14)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 154, column 1 to column 16)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 155, column 1 to column 14)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 156, column 1 to column 16)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 163, column 2 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 164, column 2 to column 23)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 191, column 10 to column 12)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 193, column 10 to column 12)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 194, column 10 to column 16)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 197, column 8 to column 10)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 199, column 11 to column 13)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 200, column 9 to column 15)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 232, column 8 to column 10)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 233, column 9 to column 11)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 6, column 2 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 7, column 2 to column 27)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 8, column 2 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 9, column 2 to column 16)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 10, column 2 to column 30)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 11, column 2 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 12, column 2 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 13, column 2 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 15, column 2 to column 15)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 16, column 2 to column 50)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 18, column 5 to column 15)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 4, column 50 to line 19, column 6)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 26, column 4 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 27, column 2 to column 37)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 28, column 9 to column 11)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 28, column 2 to column 23)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 32, column 3 to column 78)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 37, column 21 to column 45)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 37, column 3 to column 45)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 39, column 3 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 30, column 17 to line 40, column 3)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 30, column 2 to line 40, column 3)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 42, column 2 to column 16)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 24, column 51 to line 43, column 3)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 49, column 2 to column 22)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 50, column 2 to column 21)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 51, column 2 to column 22)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 52, column 2 to column 22)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 53, column 2 to column 22)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 54, column 2 to column 23)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 55, column 2 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 56, column 2 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 57, column 2 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 58, column 2 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 60, column 2 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 61, column 2 to column 28)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 62, column 2 to column 32)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 63, column 2 to column 32)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 64, column 2 to column 32)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 65, column 2 to column 55)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 66, column 2 to column 38)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 69, column 2 to column 22)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 72, column 2 to column 67)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 73, column 2 to column 37)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 74, column 2 to column 41)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 75, column 2 to column 41)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 76, column 2 to column 37)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 78, column 2 to column 15)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 47, column 47 to line 79, column 3)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 87, column 2 to column 15)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 88, column 2 to column 23)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 90, column 8 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 90, column 2 to column 43)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 92, column 8 to column 12)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 92, column 2 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 93, column 2 to column 28)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 94, column 2 to column 21)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 95, column 10 to column 12)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 95, column 14 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 95, column 2 to column 28)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 99, column 3 to column 31)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 100, column 3 to column 41)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 103, column 9 to line 109, column 24)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 103, column 8 to line 109, column 25)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 102, column 23 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 102, column 22 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 102, column 3 to line 109, column 25)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 112, column 37 to column 63)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 112, column 36 to column 64)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 112, column 3 to column 64)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 114, column 21 to column 45)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 114, column 3 to column 45)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 115, column 3 to column 17)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 97, column 18 to line 116, column 3)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 97, column 2 to line 116, column 3)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 118, column 1 to column 16)",
 " (in '/home/tng/Documents/PremiersEssais/Neutropenia/model/neutro4.stan', line 85, column 58 to line 119, column 2)"};

struct solvetwoCptModel_functor__ {
  template <typename T0__, typename T1__, typename T4__, typename T5__,
            typename T6__, typename T7__, typename T8__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T4__>* = nullptr,
            stan::require_stan_scalar_t<T5__>* = nullptr,
            stan::require_stan_scalar_t<T6__>* = nullptr,
            stan::require_stan_scalar_t<T7__>* = nullptr,
            stan::require_stan_scalar_t<T8__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, T1__, T4__, T5__, T6__,
                       stan::promote_args_t<T7__, T8__>>, -1, -1>
  operator()(const std::vector<T0__>& time, const std::vector<T1__>& amt,
             const std::vector<int>& cmt, const std::vector<int>& evid,
             const T4__& CL, const T5__& Q, const T6__& V1, const T7__& V2,
             const T8__& ka, std::ostream* pstream__) const;
};
struct solvetwoCptNeut_functor__ {
  template <typename T0__, typename T1__, typename T4__, typename T5__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T4__>* = nullptr,
            stan::require_col_vector_t<T5__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, T1__, T4__, stan::value_type_t<T5__>>, -1, -1>
  operator()(const std::vector<T0__>& time, const std::vector<T1__>& amt,
             const std::vector<int>& cmt, const std::vector<int>& evid,
             const std::vector<T4__>& params, const T5__& conc,
             const std::vector<double>& rdummy, const std::vector<int>& idummy,
             std::ostream* pstream__) const;
};
struct NeutODE_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr,
            stan::require_stan_scalar_t<T3__>* = nullptr>
  std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
  operator()(const T0__& t, const std::vector<T1__>& x,
             const std::vector<T2__>& params, const std::vector<T3__>& rdummy,
             const std::vector<int>& idummy, std::ostream* pstream__) const;
};
struct expMatSolve_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__, typename T6__, typename T7__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_col_vector_t<T2__>* = nullptr,
            stan::require_stan_scalar_t<T3__>* = nullptr,
            stan::require_stan_scalar_t<T4__>* = nullptr,
            stan::require_stan_scalar_t<T5__>* = nullptr,
            stan::require_stan_scalar_t<T6__>* = nullptr,
            stan::require_stan_scalar_t<T7__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>, T3__, T4__,
                       stan::promote_args_t<T5__, T6__, T7__>>, -1, 1>
  operator()(const T0__& t0, const T1__& t, const T2__& init, const T3__& CL,
             const T4__& Q, const T5__& V1, const T6__& V2, const T7__& ka,
             std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_col_vector_t<T2__>* = nullptr,
          stan::require_stan_scalar_t<T3__>* = nullptr,
          stan::require_stan_scalar_t<T4__>* = nullptr,
          stan::require_stan_scalar_t<T5__>* = nullptr,
          stan::require_stan_scalar_t<T6__>* = nullptr,
          stan::require_stan_scalar_t<T7__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>, T3__, T4__,
                     stan::promote_args_t<T5__, T6__, T7__>>, -1, 1>
  expMatSolve(const T0__& t0, const T1__& t, const T2__& init_arg__,
              const T3__& CL, const T4__& Q, const T5__& V1, const T6__& V2,
              const T7__& ka, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>, T3__,
                                 T4__, stan::promote_args_t<T5__, T6__, T7__>>;
    int current_statement__ = 0; 
    const auto& init = stan::math::to_ref(init_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      Eigen::Matrix<local_scalar_t__, -1, -1> K =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(3, 3, DUMMY_VAR__);
      current_statement__ = 92;
      stan::model::assign(K, stan::math::rep_matrix(0, 3, 3),
        "assigning variable K");
      current_statement__ = 93;
      stan::model::assign(K, -ka,
        "assigning variable K", stan::model::index_uni(1),
                                  stan::model::index_uni(1));
      current_statement__ = 94;
      stan::model::assign(K, ka,
        "assigning variable K", stan::model::index_uni(2),
                                  stan::model::index_uni(1));
      current_statement__ = 95;
      stan::model::assign(K, -((CL / V1) + (Q / V1)),
        "assigning variable K", stan::model::index_uni(2),
                                  stan::model::index_uni(2));
      current_statement__ = 96;
      stan::model::assign(K, (Q / V2),
        "assigning variable K", stan::model::index_uni(2),
                                  stan::model::index_uni(3));
      current_statement__ = 97;
      stan::model::assign(K, (Q / V1),
        "assigning variable K", stan::model::index_uni(3),
                                  stan::model::index_uni(2));
      current_statement__ = 98;
      stan::model::assign(K, (-Q / V2),
        "assigning variable K", stan::model::index_uni(3),
                                  stan::model::index_uni(3));
      Eigen::Matrix<local_scalar_t__, -1, 1> x =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3, DUMMY_VAR__);
      current_statement__ = 100;
      stan::model::assign(x,
        stan::math::multiply(
          stan::math::matrix_exp(stan::math::multiply((t - t0), K)),
          stan::math::to_vector(init)), "assigning variable x");
      current_statement__ = 101;
      return x;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T4__, typename T5__,
          typename T6__, typename T7__, typename T8__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T4__>* = nullptr,
          stan::require_stan_scalar_t<T5__>* = nullptr,
          stan::require_stan_scalar_t<T6__>* = nullptr,
          stan::require_stan_scalar_t<T7__>* = nullptr,
          stan::require_stan_scalar_t<T8__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, T1__, T4__, T5__, T6__,
                     stan::promote_args_t<T7__, T8__>>, -1, -1>
  solvetwoCptModel(const std::vector<T0__>& time,
                   const std::vector<T1__>& amt, const std::vector<int>& cmt,
                   const std::vector<int>& evid, const T4__& CL,
                   const T5__& Q, const T6__& V1, const T7__& V2,
                   const T8__& ka, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, T1__, T4__, T5__, T6__,
                                 stan::promote_args_t<T7__, T8__>>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int nt = std::numeric_limits<int>::min();
      current_statement__ = 103;
      nt = stan::math::size(time);
      Eigen::Matrix<local_scalar_t__, -1, 1> init =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3, DUMMY_VAR__);
      current_statement__ = 104;
      stan::model::assign(init, stan::math::rep_vector(0, 3),
        "assigning variable init");
      current_statement__ = 105;
      stan::math::validate_non_negative_index("result", "nt", nt);
      Eigen::Matrix<local_scalar_t__, -1, -1> result =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(nt, 3,
           DUMMY_VAR__);
      current_statement__ = 112;
      for (int i = 1; i <= nt; ++i) {
        current_statement__ = 107;
        stan::model::assign(init,
          expMatSolve(
            stan::model::rvalue(time, "time",
              stan::model::index_uni(stan::math::max(1, (i - 1)))),
            stan::model::rvalue(time, "time", stan::model::index_uni(i)),
            stan::model::deep_copy(init), CL, Q, V1, V2, ka, pstream__),
          "assigning variable init");
        current_statement__ = 109;
        if (stan::math::logical_eq(
              stan::model::rvalue(evid, "evid", stan::model::index_uni(i)),
              1)) {
          current_statement__ = 108;
          stan::model::assign(init,
            (stan::model::rvalue(init, "init",
               stan::model::index_uni(stan::model::rvalue(cmt, "cmt",
                                        stan::model::index_uni(i)))) +
              stan::model::rvalue(amt, "amt", stan::model::index_uni(i))),
            "assigning variable init", stan::model::index_uni(stan::model::rvalue(
                                                                cmt, "cmt",
                                                                stan::model::index_uni(i))));
        } 
        current_statement__ = 110;
        stan::model::assign(result, stan::math::transpose(init),
          "assigning variable result", stan::model::index_uni(i),
                                         stan::model::index_omni());
      }
      current_statement__ = 113;
      return result;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr,
          stan::require_stan_scalar_t<T3__>* = nullptr>
  std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
  NeutODE(const T0__& t, const std::vector<T1__>& x,
          const std::vector<T2__>& params, const std::vector<T3__>& rdummy,
          const std::vector<int>& idummy, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ CL = DUMMY_VAR__;
      current_statement__ = 115;
      CL = stan::model::rvalue(params, "params", stan::model::index_uni(1));
      local_scalar_t__ Q = DUMMY_VAR__;
      current_statement__ = 116;
      Q = stan::model::rvalue(params, "params", stan::model::index_uni(2));
      local_scalar_t__ V1 = DUMMY_VAR__;
      current_statement__ = 117;
      V1 = stan::model::rvalue(params, "params", stan::model::index_uni(3));
      local_scalar_t__ V2 = DUMMY_VAR__;
      current_statement__ = 118;
      V2 = stan::model::rvalue(params, "params", stan::model::index_uni(4));
      local_scalar_t__ ka = DUMMY_VAR__;
      current_statement__ = 119;
      ka = stan::model::rvalue(params, "params", stan::model::index_uni(5));
      local_scalar_t__ mtt = DUMMY_VAR__;
      current_statement__ = 120;
      mtt = stan::model::rvalue(params, "params", stan::model::index_uni(6));
      local_scalar_t__ circ0 = DUMMY_VAR__;
      current_statement__ = 121;
      circ0 = stan::model::rvalue(params, "params",
                stan::model::index_uni(7));
      local_scalar_t__ gamma = DUMMY_VAR__;
      current_statement__ = 122;
      gamma = stan::model::rvalue(params, "params",
                stan::model::index_uni(8));
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 123;
      alpha = stan::model::rvalue(params, "params",
                stan::model::index_uni(9));
      local_scalar_t__ conc = DUMMY_VAR__;
      current_statement__ = 124;
      conc = stan::model::rvalue(params, "params",
               stan::model::index_uni(10));
      local_scalar_t__ ktr = DUMMY_VAR__;
      current_statement__ = 125;
      ktr = (4.0 / mtt);
      local_scalar_t__ prol = DUMMY_VAR__;
      current_statement__ = 126;
      prol = (stan::model::rvalue(x, "x", stan::model::index_uni(1)) + circ0);
      local_scalar_t__ transit1 = DUMMY_VAR__;
      current_statement__ = 127;
      transit1 = (stan::model::rvalue(x, "x", stan::model::index_uni(2)) +
                   circ0);
      local_scalar_t__ transit2 = DUMMY_VAR__;
      current_statement__ = 128;
      transit2 = (stan::model::rvalue(x, "x", stan::model::index_uni(3)) +
                   circ0);
      local_scalar_t__ transit3 = DUMMY_VAR__;
      current_statement__ = 129;
      transit3 = (stan::model::rvalue(x, "x", stan::model::index_uni(4)) +
                   circ0);
      local_scalar_t__ circ = DUMMY_VAR__;
      current_statement__ = 130;
      circ = stan::math::fmax(stan::math::machine_precision(),
               (stan::model::rvalue(x, "x", stan::model::index_uni(5)) +
                 circ0));
      local_scalar_t__ EDrug = DUMMY_VAR__;
      current_statement__ = 131;
      EDrug = stan::math::fmin(1, (alpha * conc));
      std::vector<local_scalar_t__> dxdt =
         std::vector<local_scalar_t__>(5, DUMMY_VAR__);
      current_statement__ = 133;
      stan::model::assign(dxdt,
        ((ktr * prol) *
          (((1 - EDrug) * stan::math::pow((circ0 / circ), gamma)) - 1)),
        "assigning variable dxdt", stan::model::index_uni(1));
      current_statement__ = 134;
      stan::model::assign(dxdt, (ktr * (prol - transit1)),
        "assigning variable dxdt", stan::model::index_uni(2));
      current_statement__ = 135;
      stan::model::assign(dxdt, (ktr * (transit1 - transit2)),
        "assigning variable dxdt", stan::model::index_uni(3));
      current_statement__ = 136;
      stan::model::assign(dxdt, (ktr * (transit2 - transit3)),
        "assigning variable dxdt", stan::model::index_uni(4));
      current_statement__ = 137;
      stan::model::assign(dxdt, (ktr * (transit3 - circ)),
        "assigning variable dxdt", stan::model::index_uni(5));
      current_statement__ = 138;
      return dxdt;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T4__, typename T5__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T4__>* = nullptr,
          stan::require_col_vector_t<T5__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, T1__, T4__, stan::value_type_t<T5__>>, -1, -1>
  solvetwoCptNeut(const std::vector<T0__>& time,
                  const std::vector<T1__>& amt, const std::vector<int>& cmt,
                  const std::vector<int>& evid,
                  const std::vector<T4__>& params, const T5__& conc_arg__,
                  const std::vector<double>& rdummy,
                  const std::vector<int>& idummy, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, T1__, T4__, stan::value_type_t<T5__>>;
    int current_statement__ = 0; 
    const auto& conc = stan::math::to_ref(conc_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int nCmt = std::numeric_limits<int>::min();
      current_statement__ = 140;
      nCmt = 5;
      int nt = std::numeric_limits<int>::min();
      current_statement__ = 141;
      nt = stan::math::size(time);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("new_params",
                                              "size(params) + 1",
                                              (stan::math::size(params) + 1));
      std::vector<local_scalar_t__> new_params =
         std::vector<local_scalar_t__>((stan::math::size(params) + 1), 
           DUMMY_VAR__);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("init", "nCmt", nCmt);
      std::vector<local_scalar_t__> init =
         std::vector<local_scalar_t__>(nCmt, DUMMY_VAR__);
      current_statement__ = 146;
      stan::model::assign(init, stan::math::rep_array(0, nCmt),
        "assigning variable init");
      local_scalar_t__ t0 = DUMMY_VAR__;
      current_statement__ = 147;
      t0 = stan::model::rvalue(time, "time", stan::model::index_uni(1));
      current_statement__ = 148;
      stan::math::validate_non_negative_index("result", "nt", nt);
      current_statement__ = 149;
      stan::math::validate_non_negative_index("result", "nCmt", nCmt);
      Eigen::Matrix<local_scalar_t__, -1, -1> result =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(nt, nCmt,
           DUMMY_VAR__);
      current_statement__ = 165;
      for (int i = 1; i <= nt; ++i) {
        std::vector<local_scalar_t__> c =
           std::vector<local_scalar_t__>(1, DUMMY_VAR__);
        current_statement__ = 151;
        stan::model::assign(c, std::vector<local_scalar_t__>{
          stan::model::rvalue(conc, "conc", stan::model::index_uni(i))},
          "assigning variable c");
        current_statement__ = 152;
        stan::model::assign(new_params, stan::math::append_array(params, c),
          "assigning variable new_params");
        current_statement__ = 157;
        if (stan::math::logical_eq(t0,
              stan::model::rvalue(time, "time", stan::model::index_uni(i)))) {
          ;
        } else {
          current_statement__ = 153;
          stan::model::assign(init,
            stan::math::to_array_1d(
              stan::math::integrate_ode_rk45(NeutODE_functor__(),
                stan::model::deep_copy(init), t0,
                stan::model::rvalue(time, "time",
                  stan::model::index_min_max(i, i)), new_params, rdummy,
                idummy, pstream__)), "assigning variable init");
        }
        current_statement__ = 160;
        if ((stan::math::primitive_value(
            stan::math::logical_eq(
              stan::model::rvalue(evid, "evid", stan::model::index_uni(i)),
              1)) && stan::math::primitive_value(
            stan::math::logical_gte(
              stan::model::rvalue(cmt, "cmt", stan::model::index_uni(i)), 4)))) {
          current_statement__ = 158;
          stan::model::assign(init,
            (stan::model::rvalue(init, "init",
               stan::model::index_uni((stan::model::rvalue(cmt, "cmt",
                                         stan::model::index_uni(i)) - 3))) +
              stan::model::rvalue(amt, "amt", stan::model::index_uni(i))),
            "assigning variable init", stan::model::index_uni((stan::model::rvalue(
                                                                 cmt, "cmt",
                                                                 stan::model::index_uni(i))
                                                                - 3)));
        } 
        current_statement__ = 162;
        for (int j = 1; j <= nCmt; ++j) {
          current_statement__ = 161;
          stan::model::assign(result,
            stan::model::rvalue(init, "init", stan::model::index_uni(j)),
            "assigning variable result", stan::model::index_uni(i),
                                           stan::model::index_uni(j));
        }
        current_statement__ = 163;
        t0 = stan::model::rvalue(time, "time", stan::model::index_uni(i));
      }
      current_statement__ = 166;
      return result;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T4__, typename T5__,
          typename T6__, typename T7__, typename T8__,
          stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T4__>*,
          stan::require_stan_scalar_t<T5__>*,
          stan::require_stan_scalar_t<T6__>*,
          stan::require_stan_scalar_t<T7__>*,
          stan::require_stan_scalar_t<T8__>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T4__, T5__, T6__,
                     stan::promote_args_t<T7__, T8__>>, -1, -1>
solvetwoCptModel_functor__::operator()(const std::vector<T0__>& time,
                                       const std::vector<T1__>& amt,
                                       const std::vector<int>& cmt,
                                       const std::vector<int>& evid,
                                       const T4__& CL, const T5__& Q,
                                       const T6__& V1, const T7__& V2,
                                       const T8__& ka,
                                       std::ostream* pstream__)  const
{
  return solvetwoCptModel(time, amt, cmt, evid, CL, Q, V1, V2, ka, pstream__);
}

template <typename T0__, typename T1__, typename T4__, typename T5__,
          stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T4__>*,
          stan::require_col_vector_t<T5__>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T4__, stan::value_type_t<T5__>>, -1, -1>
solvetwoCptNeut_functor__::operator()(const std::vector<T0__>& time,
                                      const std::vector<T1__>& amt,
                                      const std::vector<int>& cmt,
                                      const std::vector<int>& evid,
                                      const std::vector<T4__>& params,
                                      const T5__& conc,
                                      const std::vector<double>& rdummy,
                                      const std::vector<int>& idummy,
                                      std::ostream* pstream__)  const
{
  return solvetwoCptNeut(time, amt, cmt, evid, params, conc, rdummy, idummy,
           pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*,
          stan::require_stan_scalar_t<T3__>*>
std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
NeutODE_functor__::operator()(const T0__& t, const std::vector<T1__>& x,
                              const std::vector<T2__>& params,
                              const std::vector<T3__>& rdummy,
                              const std::vector<int>& idummy,
                              std::ostream* pstream__)  const
{
  return NeutODE(t, x, params, rdummy, idummy, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_col_vector_t<T2__>*,
          stan::require_stan_scalar_t<T3__>*,
          stan::require_stan_scalar_t<T4__>*,
          stan::require_stan_scalar_t<T5__>*,
          stan::require_stan_scalar_t<T6__>*,
          stan::require_stan_scalar_t<T7__>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>, T3__, T4__,
                     stan::promote_args_t<T5__, T6__, T7__>>, -1, 1>
expMatSolve_functor__::operator()(const T0__& t0, const T1__& t,
                                  const T2__& init, const T3__& CL,
                                  const T4__& Q, const T5__& V1,
                                  const T6__& V2, const T7__& ka,
                                  std::ostream* pstream__)  const
{
  return expMatSolve(t0, t, init, CL, Q, V1, V2, ka, pstream__);
}

 class neutro4_model final : public model_base_crtp<neutro4_model> {

 private:
  int nt;
  std::vector<double> time;
  int nObsPD;
  int nObsPK;
  std::vector<int> iObsPD;
  std::vector<int> iObsPK;
  std::vector<double> amt;
  std::vector<int> cmt;
  std::vector<int> evid;
  std::vector<double> cObs;
  std::vector<double> neutObs;
  double circ0Prior;
  double circ0PriorCV;
  double CLPrior;
  double CLPriorCV;
  double gammaPrior;
  double gammaPriorCV;
  double alphaPrior;
  double alphaPriorCV;
  double kaPrior;
  double kaPriorCV;
  double mttPrior;
  double mttPriorCV;
  double QPrior;
  double QPriorCV;
  double V1Prior;
  double V1PriorCV;
  double V2Prior;
  double V2PriorCV;
  std::vector<double> rdummy;
  std::vector<int> idummy; 
  
 
 public:
  ~neutro4_model() { }
  
  inline std::string model_name() const final { return "neutro4_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = "};
  }
  
  
  neutro4_model(stan::io::var_context& context__,
                unsigned int random_seed__ = 0,
                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "neutro4_model_namespace::neutro4_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 44;
      context__.validate_dims("data initialization","nt","int",
           std::vector<size_t>{});
      nt = std::numeric_limits<int>::min();
      
      
      current_statement__ = 44;
      nt = context__.vals_i("nt")[(1 - 1)];
      current_statement__ = 45;
      stan::math::validate_non_negative_index("time", "nt", nt);
      current_statement__ = 46;
      context__.validate_dims("data initialization","time","double",
           std::vector<size_t>{static_cast<size_t>(nt)});
      time = 
        std::vector<double>(nt, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 46;
      time = context__.vals_r("time");
      current_statement__ = 47;
      context__.validate_dims("data initialization","nObsPD","int",
           std::vector<size_t>{});
      nObsPD = std::numeric_limits<int>::min();
      
      
      current_statement__ = 47;
      nObsPD = context__.vals_i("nObsPD")[(1 - 1)];
      current_statement__ = 48;
      context__.validate_dims("data initialization","nObsPK","int",
           std::vector<size_t>{});
      nObsPK = std::numeric_limits<int>::min();
      
      
      current_statement__ = 48;
      nObsPK = context__.vals_i("nObsPK")[(1 - 1)];
      current_statement__ = 49;
      stan::math::validate_non_negative_index("iObsPD", "nObsPD", nObsPD);
      current_statement__ = 50;
      context__.validate_dims("data initialization","iObsPD","int",
           std::vector<size_t>{static_cast<size_t>(nObsPD)});
      iObsPD = std::vector<int>(nObsPD, std::numeric_limits<int>::min());
      
      
      current_statement__ = 50;
      iObsPD = context__.vals_i("iObsPD");
      current_statement__ = 51;
      stan::math::validate_non_negative_index("iObsPK", "nObsPK", nObsPK);
      current_statement__ = 52;
      context__.validate_dims("data initialization","iObsPK","int",
           std::vector<size_t>{static_cast<size_t>(nObsPK)});
      iObsPK = std::vector<int>(nObsPK, std::numeric_limits<int>::min());
      
      
      current_statement__ = 52;
      iObsPK = context__.vals_i("iObsPK");
      current_statement__ = 53;
      stan::math::validate_non_negative_index("amt", "nt", nt);
      current_statement__ = 54;
      context__.validate_dims("data initialization","amt","double",
           std::vector<size_t>{static_cast<size_t>(nt)});
      amt = 
        std::vector<double>(nt, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 54;
      amt = context__.vals_r("amt");
      current_statement__ = 55;
      stan::math::validate_non_negative_index("cmt", "nt", nt);
      current_statement__ = 56;
      context__.validate_dims("data initialization","cmt","int",
           std::vector<size_t>{static_cast<size_t>(nt)});
      cmt = std::vector<int>(nt, std::numeric_limits<int>::min());
      
      
      current_statement__ = 56;
      cmt = context__.vals_i("cmt");
      current_statement__ = 57;
      stan::math::validate_non_negative_index("evid", "nt", nt);
      current_statement__ = 58;
      context__.validate_dims("data initialization","evid","int",
           std::vector<size_t>{static_cast<size_t>(nt)});
      evid = std::vector<int>(nt, std::numeric_limits<int>::min());
      
      
      current_statement__ = 58;
      evid = context__.vals_i("evid");
      current_statement__ = 59;
      stan::math::validate_non_negative_index("cObs", "nObsPK", nObsPK);
      current_statement__ = 60;
      context__.validate_dims("data initialization","cObs","double",
           std::vector<size_t>{static_cast<size_t>(nObsPK)});
      cObs = 
        std::vector<double>(nObsPK, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 60;
      cObs = context__.vals_r("cObs");
      current_statement__ = 61;
      stan::math::validate_non_negative_index("neutObs", "nObsPD", nObsPD);
      current_statement__ = 62;
      context__.validate_dims("data initialization","neutObs","double",
           std::vector<size_t>{static_cast<size_t>(nObsPD)});
      neutObs = 
        std::vector<double>(nObsPD, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 62;
      neutObs = context__.vals_r("neutObs");
      current_statement__ = 63;
      context__.validate_dims("data initialization","circ0Prior","double",
           std::vector<size_t>{});
      circ0Prior = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 63;
      circ0Prior = context__.vals_r("circ0Prior")[(1 - 1)];
      current_statement__ = 64;
      context__.validate_dims("data initialization","circ0PriorCV","double",
           std::vector<size_t>{});
      circ0PriorCV = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 64;
      circ0PriorCV = context__.vals_r("circ0PriorCV")[(1 - 1)];
      current_statement__ = 65;
      context__.validate_dims("data initialization","CLPrior","double",
           std::vector<size_t>{});
      CLPrior = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 65;
      CLPrior = context__.vals_r("CLPrior")[(1 - 1)];
      current_statement__ = 66;
      context__.validate_dims("data initialization","CLPriorCV","double",
           std::vector<size_t>{});
      CLPriorCV = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 66;
      CLPriorCV = context__.vals_r("CLPriorCV")[(1 - 1)];
      current_statement__ = 67;
      context__.validate_dims("data initialization","gammaPrior","double",
           std::vector<size_t>{});
      gammaPrior = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 67;
      gammaPrior = context__.vals_r("gammaPrior")[(1 - 1)];
      current_statement__ = 68;
      context__.validate_dims("data initialization","gammaPriorCV","double",
           std::vector<size_t>{});
      gammaPriorCV = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 68;
      gammaPriorCV = context__.vals_r("gammaPriorCV")[(1 - 1)];
      current_statement__ = 69;
      context__.validate_dims("data initialization","alphaPrior","double",
           std::vector<size_t>{});
      alphaPrior = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 69;
      alphaPrior = context__.vals_r("alphaPrior")[(1 - 1)];
      current_statement__ = 70;
      context__.validate_dims("data initialization","alphaPriorCV","double",
           std::vector<size_t>{});
      alphaPriorCV = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 70;
      alphaPriorCV = context__.vals_r("alphaPriorCV")[(1 - 1)];
      current_statement__ = 71;
      context__.validate_dims("data initialization","kaPrior","double",
           std::vector<size_t>{});
      kaPrior = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 71;
      kaPrior = context__.vals_r("kaPrior")[(1 - 1)];
      current_statement__ = 72;
      context__.validate_dims("data initialization","kaPriorCV","double",
           std::vector<size_t>{});
      kaPriorCV = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 72;
      kaPriorCV = context__.vals_r("kaPriorCV")[(1 - 1)];
      current_statement__ = 73;
      context__.validate_dims("data initialization","mttPrior","double",
           std::vector<size_t>{});
      mttPrior = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 73;
      mttPrior = context__.vals_r("mttPrior")[(1 - 1)];
      current_statement__ = 74;
      context__.validate_dims("data initialization","mttPriorCV","double",
           std::vector<size_t>{});
      mttPriorCV = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 74;
      mttPriorCV = context__.vals_r("mttPriorCV")[(1 - 1)];
      current_statement__ = 75;
      context__.validate_dims("data initialization","QPrior","double",
           std::vector<size_t>{});
      QPrior = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 75;
      QPrior = context__.vals_r("QPrior")[(1 - 1)];
      current_statement__ = 76;
      context__.validate_dims("data initialization","QPriorCV","double",
           std::vector<size_t>{});
      QPriorCV = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 76;
      QPriorCV = context__.vals_r("QPriorCV")[(1 - 1)];
      current_statement__ = 77;
      context__.validate_dims("data initialization","V1Prior","double",
           std::vector<size_t>{});
      V1Prior = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 77;
      V1Prior = context__.vals_r("V1Prior")[(1 - 1)];
      current_statement__ = 78;
      context__.validate_dims("data initialization","V1PriorCV","double",
           std::vector<size_t>{});
      V1PriorCV = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 78;
      V1PriorCV = context__.vals_r("V1PriorCV")[(1 - 1)];
      current_statement__ = 79;
      context__.validate_dims("data initialization","V2Prior","double",
           std::vector<size_t>{});
      V2Prior = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 79;
      V2Prior = context__.vals_r("V2Prior")[(1 - 1)];
      current_statement__ = 80;
      context__.validate_dims("data initialization","V2PriorCV","double",
           std::vector<size_t>{});
      V2PriorCV = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 80;
      V2PriorCV = context__.vals_r("V2PriorCV")[(1 - 1)];
      current_statement__ = 81;
      rdummy = 
        std::vector<double>(0, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 82;
      idummy = std::vector<int>(0, std::numeric_limits<int>::min());
      
      
      current_statement__ = 83;
      stan::math::validate_non_negative_index("y", "nt", nt);
      current_statement__ = 84;
      stan::math::validate_non_negative_index("cHat", "nt", nt);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("cHatObs", "nObsPK", nObsPK);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("x", "nt", nt);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("neutHat", "nt", nt);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("neutHatObs", "nObsPD", nObsPD);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("cPred", "nt", nt);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("neutPred", "nt", nt);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "neutro4_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ CL = DUMMY_VAR__;
      current_statement__ = 1;
      CL = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      local_scalar_t__ Q = DUMMY_VAR__;
      current_statement__ = 2;
      Q = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      local_scalar_t__ V1 = DUMMY_VAR__;
      current_statement__ = 3;
      V1 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      local_scalar_t__ V2 = DUMMY_VAR__;
      current_statement__ = 4;
      V2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      local_scalar_t__ ka = DUMMY_VAR__;
      current_statement__ = 5;
      ka = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 6;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ mtt = DUMMY_VAR__;
      current_statement__ = 7;
      mtt = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      local_scalar_t__ circ0 = DUMMY_VAR__;
      current_statement__ = 8;
      circ0 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 9;
      alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ gamma = DUMMY_VAR__;
      current_statement__ = 10;
      gamma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ sigmaNeut = DUMMY_VAR__;
      current_statement__ = 11;
      sigmaNeut = in__.template read_constrain_lb<local_scalar_t__, 
                    jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, -1> y =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(nt, 3,
           DUMMY_VAR__);
      current_statement__ = 19;
      stan::model::assign(y,
        solvetwoCptModel(time, amt, cmt, evid, CL, Q, V1, V2, ka, pstream__),
        "assigning variable y");
      Eigen::Matrix<local_scalar_t__, -1, 1> cHat =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(nt, DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(cHat,
        stan::math::elt_divide(
          stan::model::rvalue(y, "y",
            stan::model::index_omni(), stan::model::index_uni(2)), V1),
        "assigning variable cHat");
      Eigen::Matrix<local_scalar_t__, -1, 1> cHatObs =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(nObsPK,
           DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(cHatObs,
        stan::model::rvalue(cHat, "cHat", stan::model::index_multi(iObsPK)),
        "assigning variable cHatObs");
      std::vector<local_scalar_t__> params =
         std::vector<local_scalar_t__>(9, DUMMY_VAR__);
      current_statement__ = 15;
      stan::model::assign(params, std::vector<local_scalar_t__>{CL, Q, V1,
        V2, ka, mtt, circ0, gamma, alpha}, "assigning variable params");
      Eigen::Matrix<local_scalar_t__, -1, -1> x =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(nt, 5,
           DUMMY_VAR__);
      current_statement__ = 20;
      stan::model::assign(x,
        solvetwoCptNeut(time, amt, cmt, evid, params, cHat, rdummy,
          idummy, pstream__), "assigning variable x");
      Eigen::Matrix<local_scalar_t__, -1, 1> neutHat =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(nt, DUMMY_VAR__);
      current_statement__ = 17;
      stan::model::assign(neutHat,
        stan::math::add(
          stan::model::rvalue(x, "x",
            stan::model::index_omni(), stan::model::index_uni(5)), circ0),
        "assigning variable neutHat");
      Eigen::Matrix<local_scalar_t__, -1, 1> neutHatObs =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(nObsPD,
           DUMMY_VAR__);
      current_statement__ = 18;
      stan::model::assign(neutHatObs,
        stan::model::rvalue(neutHat, "neutHat",
          stan::model::index_multi(iObsPD)), "assigning variable neutHatObs");
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "params", params, 0);
      {
        current_statement__ = 31;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(stan::math::log(CL),
            stan::math::log(CLPrior), CLPriorCV));
        current_statement__ = 32;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(stan::math::log(Q),
            stan::math::log(QPrior), QPriorCV));
        current_statement__ = 33;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(stan::math::log(V1),
            stan::math::log(V1Prior), V1PriorCV));
        current_statement__ = 34;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(stan::math::log(V2),
            stan::math::log(V2Prior), V2PriorCV));
        current_statement__ = 35;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(stan::math::log(ka),
            stan::math::log(kaPrior), kaPriorCV));
        current_statement__ = 36;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma, 0, 1));
        current_statement__ = 37;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(stan::math::log(cObs),
            stan::math::log(cHatObs), sigma));
        current_statement__ = 38;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(stan::math::log(mtt),
            stan::math::log(mttPrior), mttPriorCV));
        current_statement__ = 39;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(stan::math::log(circ0),
            stan::math::log(circ0Prior), circ0PriorCV));
        current_statement__ = 40;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(stan::math::log(alpha),
            stan::math::log(alphaPrior), alphaPriorCV));
        current_statement__ = 41;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(stan::math::log(gamma),
            stan::math::log(gammaPrior), gammaPriorCV));
        current_statement__ = 42;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigmaNeut, 0, 1));
        current_statement__ = 43;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(stan::math::log(neutObs),
            stan::math::log(
              stan::math::fmax(stan::math::machine_precision(), neutHatObs)),
            sigmaNeut));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "neutro4_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double CL = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      CL = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      double Q = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      Q = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      double V1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      V1 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      double V2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      V2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      double ka = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      ka = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double mtt = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      mtt = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      double circ0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      circ0 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double gamma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      gamma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double sigmaNeut = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 11;
      sigmaNeut = in__.template read_constrain_lb<local_scalar_t__, 
                    jacobian__>(0, lp__);
      Eigen::Matrix<double, -1, -1> y =
         Eigen::Matrix<double, -1, -1>::Constant(nt, 3,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> cHat =
         Eigen::Matrix<double, -1, 1>::Constant(nt,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> cHatObs =
         Eigen::Matrix<double, -1, 1>::Constant(nObsPK,
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> params =
         std::vector<double>(9, std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> x =
         Eigen::Matrix<double, -1, -1>::Constant(nt, 5,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> neutHat =
         Eigen::Matrix<double, -1, 1>::Constant(nt,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> neutHatObs =
         Eigen::Matrix<double, -1, 1>::Constant(nObsPD,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(CL);
      out__.write(Q);
      out__.write(V1);
      out__.write(V2);
      out__.write(ka);
      out__.write(sigma);
      out__.write(mtt);
      out__.write(circ0);
      out__.write(alpha);
      out__.write(gamma);
      out__.write(sigmaNeut);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 19;
      stan::model::assign(y,
        solvetwoCptModel(time, amt, cmt, evid, CL, Q, V1, V2, ka, pstream__),
        "assigning variable y");
      current_statement__ = 13;
      stan::model::assign(cHat,
        stan::math::elt_divide(
          stan::model::rvalue(y, "y",
            stan::model::index_omni(), stan::model::index_uni(2)), V1),
        "assigning variable cHat");
      current_statement__ = 14;
      stan::model::assign(cHatObs,
        stan::model::rvalue(cHat, "cHat", stan::model::index_multi(iObsPK)),
        "assigning variable cHatObs");
      current_statement__ = 15;
      stan::model::assign(params, std::vector<local_scalar_t__>{CL, Q, V1,
        V2, ka, mtt, circ0, gamma, alpha}, "assigning variable params");
      current_statement__ = 20;
      stan::model::assign(x,
        solvetwoCptNeut(time, amt, cmt, evid, params, cHat, rdummy,
          idummy, pstream__), "assigning variable x");
      current_statement__ = 17;
      stan::model::assign(neutHat,
        stan::math::add(
          stan::model::rvalue(x, "x",
            stan::model::index_omni(), stan::model::index_uni(5)), circ0),
        "assigning variable neutHat");
      current_statement__ = 18;
      stan::model::assign(neutHatObs,
        stan::model::rvalue(neutHat, "neutHat",
          stan::model::index_multi(iObsPD)), "assigning variable neutHatObs");
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "params", params, 0);
      if (emit_transformed_parameters__) {
        out__.write(y);
        out__.write(cHat);
        out__.write(cHatObs);
        out__.write(params);
        out__.write(x);
        out__.write(neutHat);
        out__.write(neutHatObs);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> cPred =
         Eigen::Matrix<double, -1, 1>::Constant(nt,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> neutPred =
         Eigen::Matrix<double, -1, 1>::Constant(nt,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 30;
      for (int i = 1; i <= nt; ++i) {
        current_statement__ = 27;
        if (stan::math::logical_eq(
              stan::model::rvalue(time, "time", stan::model::index_uni(i)),
              0)) {
          current_statement__ = 25;
          stan::model::assign(cPred, 0,
            "assigning variable cPred", stan::model::index_uni(i));
        } else {
          current_statement__ = 23;
          stan::model::assign(cPred,
            stan::math::lognormal_rng(
              stan::math::log(
                stan::math::fmax(stan::math::machine_precision(),
                  stan::model::rvalue(cHat, "cHat",
                    stan::model::index_uni(i)))), sigma, base_rng__),
            "assigning variable cPred", stan::model::index_uni(i));
        }
        current_statement__ = 28;
        stan::model::assign(neutPred,
          stan::math::lognormal_rng(
            stan::math::log(
              stan::math::fmax(stan::math::machine_precision(),
                stan::model::rvalue(neutHat, "neutHat",
                  stan::model::index_uni(i)))), sigmaNeut, base_rng__),
          "assigning variable neutPred", stan::model::index_uni(i));
      }
      out__.write(cPred);
      out__.write(neutPred);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ CL = DUMMY_VAR__;
      CL = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, CL);
      local_scalar_t__ Q = DUMMY_VAR__;
      Q = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, Q);
      local_scalar_t__ V1 = DUMMY_VAR__;
      V1 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, V1);
      local_scalar_t__ V2 = DUMMY_VAR__;
      V2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, V2);
      local_scalar_t__ ka = DUMMY_VAR__;
      ka = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, ka);
      local_scalar_t__ sigma = DUMMY_VAR__;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      local_scalar_t__ mtt = DUMMY_VAR__;
      mtt = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, mtt);
      local_scalar_t__ circ0 = DUMMY_VAR__;
      circ0 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, circ0);
      local_scalar_t__ alpha = DUMMY_VAR__;
      alpha = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, alpha);
      local_scalar_t__ gamma = DUMMY_VAR__;
      gamma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, gamma);
      local_scalar_t__ sigmaNeut = DUMMY_VAR__;
      sigmaNeut = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigmaNeut);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"CL", "Q", "V1", "V2", "ka", "sigma",
      "mtt", "circ0", "alpha", "gamma", "sigmaNeut", "y", "cHat", "cHatObs",
      "params", "x", "neutHat", "neutHatObs", "cPred", "neutPred"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(nt), static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(nt)},
      std::vector<size_t>{static_cast<size_t>(nObsPK)},
      std::vector<size_t>{static_cast<size_t>(9)},
      std::vector<size_t>{static_cast<size_t>(nt), static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(nt)},
      std::vector<size_t>{static_cast<size_t>(nObsPD)},
      std::vector<size_t>{static_cast<size_t>(nt)},
      std::vector<size_t>{static_cast<size_t>(nt)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "CL");
    param_names__.emplace_back(std::string() + "Q");
    param_names__.emplace_back(std::string() + "V1");
    param_names__.emplace_back(std::string() + "V2");
    param_names__.emplace_back(std::string() + "ka");
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "mtt");
    param_names__.emplace_back(std::string() + "circ0");
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "gamma");
    param_names__.emplace_back(std::string() + "sigmaNeut");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nt; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cHat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nObsPK; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cHatObs" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 9; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "params" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nt; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "neutHat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nObsPD; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "neutHatObs" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cPred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "neutPred" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "CL");
    param_names__.emplace_back(std::string() + "Q");
    param_names__.emplace_back(std::string() + "V1");
    param_names__.emplace_back(std::string() + "V2");
    param_names__.emplace_back(std::string() + "ka");
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "mtt");
    param_names__.emplace_back(std::string() + "circ0");
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "gamma");
    param_names__.emplace_back(std::string() + "sigmaNeut");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nt; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cHat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nObsPK; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cHatObs" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 9; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "params" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nt; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "neutHat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nObsPD; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "neutHatObs" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cPred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "neutPred" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"CL\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Q\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"V1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"V2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ka\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mtt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"circ0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigmaNeut\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nt) + ",\"cols\":" + std::to_string(3) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cHat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nt) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cHatObs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nObsPK) + "},\"block\":\"transformed_parameters\"},{\"name\":\"params\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(9) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nt) + ",\"cols\":" + std::to_string(5) + "},\"block\":\"transformed_parameters\"},{\"name\":\"neutHat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nt) + "},\"block\":\"transformed_parameters\"},{\"name\":\"neutHatObs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nObsPD) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cPred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nt) + "},\"block\":\"generated_quantities\"},{\"name\":\"neutPred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nt) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"CL\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Q\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"V1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"V2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ka\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mtt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"circ0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigmaNeut\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nt) + ",\"cols\":" + std::to_string(3) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cHat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nt) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cHatObs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nObsPK) + "},\"block\":\"transformed_parameters\"},{\"name\":\"params\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(9) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nt) + ",\"cols\":" + std::to_string(5) + "},\"block\":\"transformed_parameters\"},{\"name\":\"neutHat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nt) + "},\"block\":\"transformed_parameters\"},{\"name\":\"neutHatObs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nObsPD) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cPred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nt) + "},\"block\":\"generated_quantities\"},{\"name\":\"neutPred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nt) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = 
  (((((((nt * 3) + nt) + nObsPK) + 9) + (nt * 5)) + nt) + nObsPD);
      const size_t num_gen_quantities = 
  (nt + nt);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = 
  (((((((nt * 3) + nt) + nObsPK) + 9) + (nt * 5)) + nt) + nObsPD);
      const size_t num_gen_quantities = 
  (nt + nt);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 11> names__{"CL", "Q", "V1", "V2",
      "ka", "sigma", "mtt", "circ0", "alpha", "gamma", "sigmaNeut"};
      const std::array<Eigen::Index, 11> constrain_param_sizes__{1, 1, 
       1, 1, 1, 1, 1, 1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } using stan_model = neutro4_model_namespace::neutro4_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return neutro4_model_namespace::profiles__;
}

#endif


