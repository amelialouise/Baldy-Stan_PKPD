
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace joint_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 244> locations_array__ = 
{" (found before start of program)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 139, column 1 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 140, column 1 to column 23)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 141, column 1 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 142, column 1 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 143, column 1 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 146, column 1 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 147, column 1 to column 26)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 152, column 1 to column 28)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 153, column 1 to column 29)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 154, column 1 to column 29)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 158, column 2 to column 37)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 159, column 1 to column 39)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 170, column 1 to column 33)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 176, column 1 to column 45)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 182, column 1 to column 55)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 187, column 1 to column 21)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 188, column 1 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 189, column 1 to column 26)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 191, column 1 to column 27)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 192, column 1 to column 30)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 193, column 1 to column 27)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 232, column 1 to column 56)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 233, column 1 to column 64)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 236, column 1 to column 33)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 171, column 1 to column 66)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 177, column 1 to column 96)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 197, column 2 to column 62)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 198, column 2 to column 62)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 199, column 2 to column 57)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 200, column 2 to column 57)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 201, column 2 to column 28)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 202, column 2 to column 38)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 203, column 2 to column 30)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 205, column 2 to line 214, column 28)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 216, column 2 to column 68)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 218, column 2 to column 67)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 219, column 2 to column 100)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 195, column 24 to line 221, column 2)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 195, column 1 to line 221, column 2)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 223, column 1 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 224, column 1 to column 29)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 237, column 1 to column 52)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 284, column 1 to column 58)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 286, column 1 to column 46)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 289, column 1 to column 34)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 290, column 1 to column 49)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 291, column 1 to column 48)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 293, column 1 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 294, column 1 to column 21)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 295, column 1 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 296, column 1 to column 23)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 297, column 1 to column 30)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 299, column 1 to column 34)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 300, column 1 to column 34)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 305, column 8 to column 44)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 304, column 19 to line 306, column 6)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 304, column 5 to line 306, column 6)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 303, column 23 to line 307, column 4)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 303, column 1 to line 307, column 4)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 308, column 1 to column 103)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 315, column 2 to column 70)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 316, column 2 to column 70)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 317, column 2 to column 65)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 318, column 2 to column 65)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 319, column 2 to column 45)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 321, column 2 to line 330, column 35)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 333, column 2 to column 80)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 336, column 2 to column 79)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 337, column 2 to column 105)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 311, column 23 to line 339, column 2)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 311, column 1 to line 339, column 2)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 341, column 1 to column 48)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 351, column 3 to column 123)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 352, column 3 to line 353, column 45)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 349, column 7 to line 355, column 3)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 346, column 3 to column 47)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 347, column 3 to column 47)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 345, column 19 to line 348, column 3)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 345, column 2 to line 355, column 3)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 343, column 16 to line 356, column 2)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 343, column 1 to line 356, column 2)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 359, column 1 to column 44)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 360, column 1 to column 44)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 361, column 1 to column 46)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 362, column 1 to column 46)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 248, column 1 to column 41)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 249, column 1 to column 41)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 250, column 1 to column 41)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 251, column 1 to column 42)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 252, column 1 to column 35)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 261, column 1 to column 26)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 262, column 3 to column 36)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 263, column 3 to column 26)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 268, column 1 to column 31)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 269, column 1 to column 30)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 275, column 2 to column 73)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 274, column 21 to line 277, column 2)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 274, column 1 to line 277, column 2)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 49, column 1 to column 19)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 50, column 1 to column 21)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 51, column 7 to column 8)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 51, column 1 to column 21)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 52, column 7 to column 8)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 52, column 1 to column 19)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 53, column 7 to column 8)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 53, column 1 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 54, column 7 to column 8)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 54, column 1 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 55, column 7 to column 8)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 55, column 1 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 56, column 7 to column 8)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 56, column 1 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 57, column 7 to column 8)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 57, column 1 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 58, column 7 to column 8)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 58, column 1 to column 21)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 61, column 1 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 62, column 7 to column 13)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 62, column 1 to column 39)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 63, column 19 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 63, column 1 to column 33)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 64, column 19 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 64, column 1 to column 35)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 67, column 1 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 68, column 19 to column 28)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 68, column 1 to column 38)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 69, column 7 to column 16)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 69, column 1 to column 38)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 70, column 7 to column 16)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 70, column 1 to column 36)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 77, column 1 to column 17)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 78, column 1 to column 15)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 79, column 1 to column 15)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 80, column 1 to column 15)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 81, column 1 to column 16)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 86, column 1 to column 14)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 91, column 8 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 91, column 1 to column 43)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 92, column 8 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 92, column 10 to column 11)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 92, column 1 to column 59)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 97, column 7 to column 8)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 97, column 1 to column 31)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 98, column 7 to column 8)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 98, column 1 to column 31)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 99, column 7 to column 8)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 99, column 1 to column 29)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 101, column 1 to column 33)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 109, column 3 to column 15)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 110, column 3 to column 14)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 111, column 3 to column 15)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 113, column 4 to column 12)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 115, column 5 to column 28)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 116, column 5 to column 22)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 117, column 5 to column 21)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 118, column 5 to column 14)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 119, column 5 to column 13)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 114, column 55 to line 120, column 5)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 114, column 4 to line 120, column 5)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 112, column 39 to line 121, column 4)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 112, column 3 to line 121, column 4)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 107, column 53 to line 122, column 3)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 107, column 2 to line 122, column 3)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 105, column 16 to line 123, column 2)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 105, column 1 to line 123, column 2)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 128, column 8 to column 14)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 128, column 16 to column 21)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 128, column 1 to column 58)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 152, column 22 to column 23)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 153, column 19 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 154, column 8 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 154, column 11 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 158, column 23 to column 28)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 159, column 19 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 170, column 19 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 176, column 19 to column 28)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 176, column 30 to column 31)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 182, column 7 to column 16)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 182, column 36 to column 42)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 187, column 9 to column 10)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 187, column 12 to column 16)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 188, column 9 to column 10)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 189, column 9 to column 15)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 191, column 19 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 192, column 19 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 193, column 8 to column 14)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 232, column 8 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 232, column 11 to column 16)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 233, column 8 to column 14)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 233, column 16 to column 21)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 236, column 8 to column 13)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 236, column 15 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 284, column 8 to column 13)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 284, column 15 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 286, column 8 to column 13)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 286, column 15 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 289, column 8 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 289, column 11 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 290, column 19 to column 28)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 290, column 30 to column 31)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 291, column 19 to column 28)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 291, column 30 to column 31)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 293, column 8 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 293, column 11 to column 15)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 294, column 8 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 295, column 8 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 296, column 8 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 297, column 8 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 297, column 11 to column 16)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 299, column 8 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 299, column 11 to column 16)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 300, column 8 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 300, column 11 to column 16)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 359, column 8 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 360, column 8 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 361, column 8 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 362, column 8 to column 9)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 6, column 2 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 7, column 2 to column 27)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 8, column 2 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 9, column 2 to column 16)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 10, column 2 to column 30)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 11, column 2 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 12, column 2 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 13, column 2 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 14, column 2 to column 17)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 15, column 2 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 18, column 2 to column 15)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 19, column 2 to column 39)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 21, column 5 to column 15)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 4, column 60 to line 21, column 16)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 28, column 4 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 29, column 2 to column 37)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 30, column 9 to column 11)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 30, column 2 to column 23)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 34, column 3 to column 83)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 36, column 21 to column 45)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 36, column 3 to column 45)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 38, column 3 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 32, column 17 to line 39, column 3)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 32, column 2 to line 39, column 3)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 41, column 2 to column 17)",
 " (in '/home/tng/Documents/PremiersEssais/Population/effectCpt/model/joint.stan', line 26, column 61 to line 41, column 18)"};

struct solvetwoCptModel_functor__ {
  template <typename T0__, typename T1__, typename T4__, typename T5__,
            typename T6__, typename T7__, typename T8__, typename T9__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T4__>* = nullptr,
            stan::require_stan_scalar_t<T5__>* = nullptr,
            stan::require_stan_scalar_t<T6__>* = nullptr,
            stan::require_stan_scalar_t<T7__>* = nullptr,
            stan::require_stan_scalar_t<T8__>* = nullptr,
            stan::require_stan_scalar_t<T9__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, T1__, T4__, T5__, T6__,
                       stan::promote_args_t<T7__, T8__, T9__>>, -1, -1>
  operator()(const std::vector<T0__>& time, const std::vector<T1__>& amt,
             const std::vector<int>& cmt, const std::vector<int>& evid,
             const T4__& CL, const T5__& Q, const T6__& V1, const T7__& V2,
             const T8__& ka, const T9__& ke0, std::ostream* pstream__) const;
};
struct expMatSolve_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__, typename T6__, typename T7__,
            typename T8__, stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_col_vector_t<T2__>* = nullptr,
            stan::require_stan_scalar_t<T3__>* = nullptr,
            stan::require_stan_scalar_t<T4__>* = nullptr,
            stan::require_stan_scalar_t<T5__>* = nullptr,
            stan::require_stan_scalar_t<T6__>* = nullptr,
            stan::require_stan_scalar_t<T7__>* = nullptr,
            stan::require_stan_scalar_t<T8__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>, T3__, T4__,
                       stan::promote_args_t<T5__, T6__, T7__, T8__>>, -1, 1>
  operator()(const T0__& t0, const T1__& t, const T2__& init, const T3__& CL,
             const T4__& Q, const T5__& V1, const T6__& V2, const T7__& ka,
             const T8__& ke0, std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__, stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_col_vector_t<T2__>* = nullptr,
          stan::require_stan_scalar_t<T3__>* = nullptr,
          stan::require_stan_scalar_t<T4__>* = nullptr,
          stan::require_stan_scalar_t<T5__>* = nullptr,
          stan::require_stan_scalar_t<T6__>* = nullptr,
          stan::require_stan_scalar_t<T7__>* = nullptr,
          stan::require_stan_scalar_t<T8__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>, T3__, T4__,
                     stan::promote_args_t<T5__, T6__, T7__, T8__>>, -1, 1>
  expMatSolve(const T0__& t0, const T1__& t, const T2__& init_arg__,
              const T3__& CL, const T4__& Q, const T5__& V1, const T6__& V2,
              const T7__& ka, const T8__& ke0, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>, T3__,
                                 T4__,
                                 stan::promote_args_t<T5__, T6__, T7__, T8__>>;
    int current_statement__ = 0; 
    const auto& init = stan::math::to_ref(init_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      Eigen::Matrix<local_scalar_t__, -1, -1> K =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(4, 4, DUMMY_VAR__);
      current_statement__ = 219;
      stan::model::assign(K, stan::math::rep_matrix(0, 4, 4),
        "assigning variable K");
      current_statement__ = 220;
      stan::model::assign(K, -ka,
        "assigning variable K", stan::model::index_uni(1),
                                  stan::model::index_uni(1));
      current_statement__ = 221;
      stan::model::assign(K, ka,
        "assigning variable K", stan::model::index_uni(2),
                                  stan::model::index_uni(1));
      current_statement__ = 222;
      stan::model::assign(K, -((CL / V1) + (Q / V1)),
        "assigning variable K", stan::model::index_uni(2),
                                  stan::model::index_uni(2));
      current_statement__ = 223;
      stan::model::assign(K, (Q / V2),
        "assigning variable K", stan::model::index_uni(2),
                                  stan::model::index_uni(3));
      current_statement__ = 224;
      stan::model::assign(K, (Q / V1),
        "assigning variable K", stan::model::index_uni(3),
                                  stan::model::index_uni(2));
      current_statement__ = 225;
      stan::model::assign(K, (-Q / V2),
        "assigning variable K", stan::model::index_uni(3),
                                  stan::model::index_uni(3));
      current_statement__ = 226;
      stan::model::assign(K, ke0,
        "assigning variable K", stan::model::index_uni(4),
                                  stan::model::index_uni(2));
      current_statement__ = 227;
      stan::model::assign(K, -ke0,
        "assigning variable K", stan::model::index_uni(4),
                                  stan::model::index_uni(4));
      Eigen::Matrix<local_scalar_t__, -1, 1> x =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(4, DUMMY_VAR__);
      current_statement__ = 229;
      stan::model::assign(x,
        stan::math::multiply(
          stan::math::matrix_exp(stan::math::multiply((t - t0), K)), init),
        "assigning variable x");
      current_statement__ = 230;
      return x;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T4__, typename T5__,
          typename T6__, typename T7__, typename T8__, typename T9__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T4__>* = nullptr,
          stan::require_stan_scalar_t<T5__>* = nullptr,
          stan::require_stan_scalar_t<T6__>* = nullptr,
          stan::require_stan_scalar_t<T7__>* = nullptr,
          stan::require_stan_scalar_t<T8__>* = nullptr,
          stan::require_stan_scalar_t<T9__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, T1__, T4__, T5__, T6__,
                     stan::promote_args_t<T7__, T8__, T9__>>, -1, -1>
  solvetwoCptModel(const std::vector<T0__>& time,
                   const std::vector<T1__>& amt, const std::vector<int>& cmt,
                   const std::vector<int>& evid, const T4__& CL,
                   const T5__& Q, const T6__& V1, const T7__& V2,
                   const T8__& ka, const T9__& ke0, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, T1__, T4__, T5__, T6__,
                                 stan::promote_args_t<T7__, T8__, T9__>>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int nt = std::numeric_limits<int>::min();
      current_statement__ = 232;
      nt = stan::math::size(time);
      Eigen::Matrix<local_scalar_t__, -1, 1> init =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(4, DUMMY_VAR__);
      current_statement__ = 233;
      stan::model::assign(init, stan::math::rep_vector(0, 4),
        "assigning variable init");
      current_statement__ = 234;
      stan::math::validate_non_negative_index("result", "nt", nt);
      Eigen::Matrix<local_scalar_t__, -1, -1> result =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(nt, 4,
           DUMMY_VAR__);
      current_statement__ = 241;
      for (int i = 1; i <= nt; ++i) {
        current_statement__ = 236;
        stan::model::assign(init,
          expMatSolve(
            stan::model::rvalue(time, "time",
              stan::model::index_uni(stan::math::max(1, (i - 1)))),
            stan::model::rvalue(time, "time", stan::model::index_uni(i)),
            stan::model::deep_copy(init), CL, Q, V1, V2, ka, ke0, pstream__),
          "assigning variable init");
        current_statement__ = 238;
        if (stan::math::logical_eq(
              stan::model::rvalue(evid, "evid", stan::model::index_uni(i)),
              1)) {
          current_statement__ = 237;
          stan::model::assign(init,
            (stan::model::rvalue(init, "init",
               stan::model::index_uni(stan::model::rvalue(cmt, "cmt",
                                        stan::model::index_uni(i)))) +
              stan::model::rvalue(amt, "amt", stan::model::index_uni(i))),
            "assigning variable init", stan::model::index_uni(stan::model::rvalue(
                                                                cmt, "cmt",
                                                                stan::model::index_uni(i))));
        } 
        current_statement__ = 239;
        stan::model::assign(result, stan::math::transpose(init),
          "assigning variable result", stan::model::index_uni(i),
                                         stan::model::index_omni());
      }
      current_statement__ = 242;
      return result;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T4__, typename T5__,
          typename T6__, typename T7__, typename T8__, typename T9__,
          stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T4__>*,
          stan::require_stan_scalar_t<T5__>*,
          stan::require_stan_scalar_t<T6__>*,
          stan::require_stan_scalar_t<T7__>*,
          stan::require_stan_scalar_t<T8__>*,
          stan::require_stan_scalar_t<T9__>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T4__, T5__, T6__,
                     stan::promote_args_t<T7__, T8__, T9__>>, -1, -1>
solvetwoCptModel_functor__::operator()(const std::vector<T0__>& time,
                                       const std::vector<T1__>& amt,
                                       const std::vector<int>& cmt,
                                       const std::vector<int>& evid,
                                       const T4__& CL, const T5__& Q,
                                       const T6__& V1, const T7__& V2,
                                       const T8__& ka, const T9__& ke0,
                                       std::ostream* pstream__)  const
{
  return solvetwoCptModel(time, amt, cmt, evid, CL, Q, V1, V2, ka, ke0,
           pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__, stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_col_vector_t<T2__>*,
          stan::require_stan_scalar_t<T3__>*,
          stan::require_stan_scalar_t<T4__>*,
          stan::require_stan_scalar_t<T5__>*,
          stan::require_stan_scalar_t<T6__>*,
          stan::require_stan_scalar_t<T7__>*,
          stan::require_stan_scalar_t<T8__>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>, T3__, T4__,
                     stan::promote_args_t<T5__, T6__, T7__, T8__>>, -1, 1>
expMatSolve_functor__::operator()(const T0__& t0, const T1__& t,
                                  const T2__& init, const T3__& CL,
                                  const T4__& Q, const T5__& V1,
                                  const T6__& V2, const T7__& ka,
                                  const T8__& ke0, std::ostream* pstream__) 
const
{
  return expMatSolve(t0, t, init, CL, Q, V1, V2, ka, ke0, pstream__);
}

 class joint_model final : public model_base_crtp<joint_model> {

 private:
  int nt;
  int N;
  std::vector<double> time;
  std::vector<int> cmt;
  std::vector<int> evid;
  std::vector<int> addl;
  std::vector<int> ii;
  std::vector<int> ss;
  std::vector<double> amt;
  std::vector<double> dose;
  int nObsPK;
  std::vector<int> iObsPK;
  Eigen::Matrix<double, -1, 1> cObs__;
  Eigen::Matrix<double, -1, 1> effObs__;
  int nSubjects;
  Eigen::Matrix<double, -1, 1> weight__;
  std::vector<int> start;
  std::vector<int> end;
  int nTheta;
  int nCmt;
  int nIIV;
  int K;
  int N_out;
  int eta;
  Eigen::Matrix<double, -1, 1> mu_omega__;
  Eigen::Matrix<double, -1, -1> cov_omega__;
  std::vector<double> new_amt;
  std::vector<int> new_evid;
  std::vector<int> new_cmt;
  double eps_dose;
  Eigen::Matrix<double, -1, -1> output__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> cObs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> effObs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> weight{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> mu_omega{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> cov_omega{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> output{nullptr, 0, 0};
 
 public:
  ~joint_model() { }
  
  inline std::string model_name() const final { return "joint_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = "};
  }
  
  
  joint_model(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "joint_model_namespace::joint_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 99;
      context__.validate_dims("data initialization","nt","int",
           std::vector<size_t>{});
      nt = std::numeric_limits<int>::min();
      
      
      current_statement__ = 99;
      nt = context__.vals_i("nt")[(1 - 1)];
      current_statement__ = 99;
      stan::math::check_greater_or_equal(function__, "nt", nt, 1);
      current_statement__ = 100;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 100;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 100;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("time", "N", N);
      current_statement__ = 102;
      context__.validate_dims("data initialization","time","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      time = 
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 102;
      time = context__.vals_r("time");
      current_statement__ = 103;
      stan::math::validate_non_negative_index("cmt", "N", N);
      current_statement__ = 104;
      context__.validate_dims("data initialization","cmt","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      cmt = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 104;
      cmt = context__.vals_i("cmt");
      current_statement__ = 105;
      stan::math::validate_non_negative_index("evid", "N", N);
      current_statement__ = 106;
      context__.validate_dims("data initialization","evid","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      evid = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 106;
      evid = context__.vals_i("evid");
      current_statement__ = 107;
      stan::math::validate_non_negative_index("addl", "N", N);
      current_statement__ = 108;
      context__.validate_dims("data initialization","addl","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      addl = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 108;
      addl = context__.vals_i("addl");
      current_statement__ = 109;
      stan::math::validate_non_negative_index("ii", "N", N);
      current_statement__ = 110;
      context__.validate_dims("data initialization","ii","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      ii = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 110;
      ii = context__.vals_i("ii");
      current_statement__ = 111;
      stan::math::validate_non_negative_index("ss", "N", N);
      current_statement__ = 112;
      context__.validate_dims("data initialization","ss","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      ss = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 112;
      ss = context__.vals_i("ss");
      current_statement__ = 113;
      stan::math::validate_non_negative_index("amt", "N", N);
      current_statement__ = 114;
      context__.validate_dims("data initialization","amt","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      amt = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 114;
      amt = context__.vals_r("amt");
      current_statement__ = 115;
      stan::math::validate_non_negative_index("dose", "N", N);
      current_statement__ = 116;
      context__.validate_dims("data initialization","dose","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      dose = 
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 116;
      dose = context__.vals_r("dose");
      current_statement__ = 117;
      context__.validate_dims("data initialization","nObsPK","int",
           std::vector<size_t>{});
      nObsPK = std::numeric_limits<int>::min();
      
      
      current_statement__ = 117;
      nObsPK = context__.vals_i("nObsPK")[(1 - 1)];
      current_statement__ = 117;
      stan::math::check_greater_or_equal(function__, "nObsPK", nObsPK, 1);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("iObsPK", "nObsPK", nObsPK);
      current_statement__ = 119;
      context__.validate_dims("data initialization","iObsPK","int",
           std::vector<size_t>{static_cast<size_t>(nObsPK)});
      iObsPK = std::vector<int>(nObsPK, std::numeric_limits<int>::min());
      
      
      current_statement__ = 119;
      iObsPK = context__.vals_i("iObsPK");
      current_statement__ = 119;
      stan::math::check_greater_or_equal(function__, "iObsPK", iObsPK, 1);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("cObs", "nObsPK", nObsPK);
      current_statement__ = 121;
      context__.validate_dims("data initialization","cObs","double",
           std::vector<size_t>{static_cast<size_t>(nObsPK)});
      cObs__ = 
        Eigen::Matrix<double, -1, 1>::Constant(nObsPK,
          std::numeric_limits<double>::quiet_NaN());
      new (&cObs) Eigen::Map<Eigen::Matrix<double, -1, 1>>(cObs__.data(), nObsPK);
        
      
      {
        std::vector<local_scalar_t__> cObs_flat__;
        current_statement__ = 121;
        cObs_flat__ = context__.vals_r("cObs");
        current_statement__ = 121;
        pos__ = 1;
        current_statement__ = 121;
        for (int sym1__ = 1; sym1__ <= nObsPK; ++sym1__) {
          current_statement__ = 121;
          stan::model::assign(cObs, cObs_flat__[(pos__ - 1)],
            "assigning variable cObs", stan::model::index_uni(sym1__));
          current_statement__ = 121;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 121;
      stan::math::check_greater_or_equal(function__, "cObs", cObs, 0);
      current_statement__ = 122;
      stan::math::validate_non_negative_index("effObs", "nObsPK", nObsPK);
      current_statement__ = 123;
      context__.validate_dims("data initialization","effObs","double",
           std::vector<size_t>{static_cast<size_t>(nObsPK)});
      effObs__ = 
        Eigen::Matrix<double, -1, 1>::Constant(nObsPK,
          std::numeric_limits<double>::quiet_NaN());
      new (&effObs) Eigen::Map<Eigen::Matrix<double, -1, 1>>(effObs__.data(), nObsPK);
        
      
      {
        std::vector<local_scalar_t__> effObs_flat__;
        current_statement__ = 123;
        effObs_flat__ = context__.vals_r("effObs");
        current_statement__ = 123;
        pos__ = 1;
        current_statement__ = 123;
        for (int sym1__ = 1; sym1__ <= nObsPK; ++sym1__) {
          current_statement__ = 123;
          stan::model::assign(effObs, effObs_flat__[(pos__ - 1)],
            "assigning variable effObs", stan::model::index_uni(sym1__));
          current_statement__ = 123;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 123;
      stan::math::check_greater_or_equal(function__, "effObs", effObs, 0);
      current_statement__ = 124;
      context__.validate_dims("data initialization","nSubjects","int",
           std::vector<size_t>{});
      nSubjects = std::numeric_limits<int>::min();
      
      
      current_statement__ = 124;
      nSubjects = context__.vals_i("nSubjects")[(1 - 1)];
      current_statement__ = 124;
      stan::math::check_greater_or_equal(function__, "nSubjects", nSubjects,
                                            1);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("weight", "nSubjects",
                                              nSubjects);
      current_statement__ = 126;
      context__.validate_dims("data initialization","weight","double",
           std::vector<size_t>{static_cast<size_t>(nSubjects)});
      weight__ = 
        Eigen::Matrix<double, -1, 1>::Constant(nSubjects,
          std::numeric_limits<double>::quiet_NaN());
      new (&weight) Eigen::Map<Eigen::Matrix<double, -1, 1>>(weight__.data(), nSubjects);
        
      
      {
        std::vector<local_scalar_t__> weight_flat__;
        current_statement__ = 126;
        weight_flat__ = context__.vals_r("weight");
        current_statement__ = 126;
        pos__ = 1;
        current_statement__ = 126;
        for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
          current_statement__ = 126;
          stan::model::assign(weight, weight_flat__[(pos__ - 1)],
            "assigning variable weight", stan::model::index_uni(sym1__));
          current_statement__ = 126;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 126;
      stan::math::check_greater_or_equal(function__, "weight", weight, 0);
      current_statement__ = 127;
      stan::math::validate_non_negative_index("start", "nSubjects", nSubjects);
      current_statement__ = 128;
      context__.validate_dims("data initialization","start","int",
           std::vector<size_t>{static_cast<size_t>(nSubjects)});
      start = std::vector<int>(nSubjects, std::numeric_limits<int>::min());
      
      
      current_statement__ = 128;
      start = context__.vals_i("start");
      current_statement__ = 128;
      stan::math::check_greater_or_equal(function__, "start", start, 0);
      current_statement__ = 129;
      stan::math::validate_non_negative_index("end", "nSubjects", nSubjects);
      current_statement__ = 130;
      context__.validate_dims("data initialization","end","int",
           std::vector<size_t>{static_cast<size_t>(nSubjects)});
      end = std::vector<int>(nSubjects, std::numeric_limits<int>::min());
      
      
      current_statement__ = 130;
      end = context__.vals_i("end");
      current_statement__ = 130;
      stan::math::check_greater_or_equal(function__, "end", end, 0);
      current_statement__ = 131;
      nTheta = std::numeric_limits<int>::min();
      
      
      current_statement__ = 131;
      nTheta = 7;
      current_statement__ = 132;
      nCmt = std::numeric_limits<int>::min();
      
      
      current_statement__ = 132;
      nCmt = 4;
      current_statement__ = 133;
      nIIV = std::numeric_limits<int>::min();
      
      
      current_statement__ = 133;
      nIIV = 5;
      current_statement__ = 134;
      K = std::numeric_limits<int>::min();
      
      
      current_statement__ = 134;
      K = nIIV;
      current_statement__ = 135;
      N_out = std::numeric_limits<int>::min();
      
      
      current_statement__ = 135;
      N_out = 2;
      current_statement__ = 136;
      eta = std::numeric_limits<int>::min();
      
      
      current_statement__ = 136;
      eta = 1;
      current_statement__ = 137;
      stan::math::validate_non_negative_index("mu_omega", "K", K);
      current_statement__ = 138;
      mu_omega__ = 
        Eigen::Matrix<double, -1, 1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      new (&mu_omega) Eigen::Map<Eigen::Matrix<double, -1, 1>>(mu_omega__.data(), K);
        
      
      current_statement__ = 138;
      stan::model::assign(mu_omega, stan::math::rep_vector(0.25, K),
        "assigning variable mu_omega");
      current_statement__ = 139;
      stan::math::validate_non_negative_index("cov_omega", "K", K);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("cov_omega", "K", K);
      current_statement__ = 141;
      cov_omega__ = 
        Eigen::Matrix<double, -1, -1>::Constant(K, K,
          std::numeric_limits<double>::quiet_NaN());
      new (&cov_omega) Eigen::Map<Eigen::Matrix<double, -1, -1>>(cov_omega__.data(), K, K);
        
      
      current_statement__ = 141;
      stan::model::assign(cov_omega,
        stan::math::diag_matrix(stan::math::rep_vector(0.25, K)),
        "assigning variable cov_omega");
      current_statement__ = 142;
      stan::math::validate_non_negative_index("new_amt", "N", N);
      current_statement__ = 143;
      new_amt = 
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 143;
      stan::model::assign(new_amt, dose, "assigning variable new_amt");
      current_statement__ = 144;
      stan::math::validate_non_negative_index("new_evid", "N", N);
      current_statement__ = 145;
      new_evid = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 145;
      stan::model::assign(new_evid, evid, "assigning variable new_evid");
      current_statement__ = 146;
      stan::math::validate_non_negative_index("new_cmt", "N", N);
      current_statement__ = 147;
      new_cmt = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 147;
      stan::model::assign(new_cmt, cmt, "assigning variable new_cmt");
      current_statement__ = 148;
      eps_dose = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 148;
      eps_dose = 0.05;
      current_statement__ = 165;
      for (int t = 1; t <= N; ++t) {
        current_statement__ = 163;
        if ((stan::math::primitive_value(
            stan::math::logical_eq(
              stan::model::rvalue(evid, "evid", stan::model::index_uni(t)),
              1)) && stan::math::primitive_value(
            stan::math::logical_neq(
              ((stan::model::rvalue(dose, "dose", stan::model::index_uni(t))
                 *
                 stan::model::rvalue(addl, "addl", stan::model::index_uni(t)))
                * stan::model::rvalue(ii, "ii", stan::model::index_uni(t))),
              0)))) {
          int t0 = std::numeric_limits<int>::min();
          current_statement__ = 149;
          t0 = t;
          int T = std::numeric_limits<int>::min();
          current_statement__ = 150;
          T = t;
          int ad = std::numeric_limits<int>::min();
          current_statement__ = 151;
          ad = 0;
          current_statement__ = 161;
          while ((stan::math::primitive_value(
                 stan::math::logical_lt(T, (N - 1))) &&
                 stan::math::primitive_value(
                 stan::math::logical_lt(ad,
                   stan::model::rvalue(addl, "addl",
                     stan::model::index_uni(t)))))) {
            current_statement__ = 152;
            T = (T + 1);
            current_statement__ = 159;
            if (stan::math::logical_lte(
                  stan::math::abs(
                    ((stan::model::rvalue(time, "time",
                        stan::model::index_uni(T)) -
                       stan::model::rvalue(time, "time",
                         stan::model::index_uni(t0))) -
                      stan::model::rvalue(ii, "ii",
                        stan::model::index_uni(t)))), eps_dose)) {
              current_statement__ = 153;
              stan::model::assign(new_amt,
                (stan::model::rvalue(new_amt, "new_amt",
                   stan::model::index_uni(T)) +
                  stan::model::rvalue(dose, "dose",
                    stan::model::index_uni(t))),
                "assigning variable new_amt", stan::model::index_uni(T));
              current_statement__ = 154;
              stan::model::assign(new_evid, 1,
                "assigning variable new_evid", stan::model::index_uni(T));
              current_statement__ = 155;
              stan::model::assign(new_cmt, 1,
                "assigning variable new_cmt", stan::model::index_uni(T));
              current_statement__ = 156;
              ad = (ad + 1);
              current_statement__ = 157;
              t0 = T;
            } 
          }
        } 
      }
      current_statement__ = 166;
      stan::math::validate_non_negative_index("output", "nObsPK", nObsPK);
      current_statement__ = 167;
      stan::math::validate_non_negative_index("output", "N_out", N_out);
      current_statement__ = 168;
      output__ = 
        Eigen::Matrix<double, -1, -1>::Constant(nObsPK, N_out,
          std::numeric_limits<double>::quiet_NaN());
      new (&output) Eigen::Map<Eigen::Matrix<double, -1, -1>>(output__.data(), nObsPK, N_out);
        
      
      current_statement__ = 168;
      stan::model::assign(output, stan::math::append_col(cObs, effObs),
        "assigning variable output");
      current_statement__ = 148;
      stan::math::check_greater_or_equal(function__, "eps_dose", eps_dose, 0);
      current_statement__ = 169;
      stan::math::validate_non_negative_index("L", "K", K);
      current_statement__ = 169;
      stan::math::validate_non_negative_index("L", "K", K);
      current_statement__ = 170;
      stan::math::validate_non_negative_index("omega", "K", K);
      current_statement__ = 171;
      stan::math::validate_non_negative_index("etaStd", "K", K);
      current_statement__ = 172;
      stan::math::validate_non_negative_index("etaStd", "nSubjects",
                                              nSubjects);
      current_statement__ = 173;
      stan::math::validate_non_negative_index("L_out", "N_out", N_out);
      current_statement__ = 173;
      stan::math::validate_non_negative_index("L_out", "N_out", N_out);
      current_statement__ = 174;
      stan::math::validate_non_negative_index("L_out_sigma", "N_out", N_out);
      current_statement__ = 175;
      stan::math::validate_non_negative_index("THETA_pop", "K", K);
      current_statement__ = 176;
      stan::math::validate_non_negative_index("THETA_norm", "nSubjects",
                                              nSubjects);
      current_statement__ = 177;
      stan::math::validate_non_negative_index("THETA_norm", "K", K);
      current_statement__ = 178;
      stan::math::validate_non_negative_index("THETA_ind", "nSubjects",
                                              nSubjects);
      current_statement__ = 179;
      stan::math::validate_non_negative_index("THETA_ind", "nTheta", nTheta);
      current_statement__ = 180;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 181;
      stan::math::validate_non_negative_index("X", "nCmt", nCmt);
      current_statement__ = 182;
      stan::math::validate_non_negative_index("cHat", "N", N);
      current_statement__ = 183;
      stan::math::validate_non_negative_index("cHatObs", "nObsPK", nObsPK);
      current_statement__ = 184;
      stan::math::validate_non_negative_index("c_e", "N", N);
      current_statement__ = 185;
      stan::math::validate_non_negative_index("effHat", "N", N);
      current_statement__ = 186;
      stan::math::validate_non_negative_index("effHatObs", "nObsPK", nObsPK);
      current_statement__ = 187;
      stan::math::validate_non_negative_index("mu_outHat", "N", N);
      current_statement__ = 188;
      stan::math::validate_non_negative_index("mu_outHat", "N_out", N_out);
      current_statement__ = 189;
      stan::math::validate_non_negative_index("mu_out", "nObsPK", nObsPK);
      current_statement__ = 190;
      stan::math::validate_non_negative_index("mu_out", "N_out", N_out);
      current_statement__ = 191;
      stan::math::validate_non_negative_index("Sigma_out", "N_out", N_out);
      current_statement__ = 192;
      stan::math::validate_non_negative_index("Sigma_out", "N_out", N_out);
      current_statement__ = 193;
      stan::math::validate_non_negative_index("Omega_out", "N_out", N_out);
      current_statement__ = 194;
      stan::math::validate_non_negative_index("Omega_out", "N_out", N_out);
      current_statement__ = 195;
      stan::math::validate_non_negative_index("R_out", "N_out", N_out);
      current_statement__ = 196;
      stan::math::validate_non_negative_index("R_out", "N_out", N_out);
      current_statement__ = 197;
      stan::math::validate_non_negative_index("etaStdPred", "K", K);
      current_statement__ = 198;
      stan::math::validate_non_negative_index("etaStdPred", "nSubjects",
                                              nSubjects);
      current_statement__ = 199;
      stan::math::validate_non_negative_index("THETAPred_norm", "nSubjects",
                                              nSubjects);
      current_statement__ = 200;
      stan::math::validate_non_negative_index("THETAPred_norm", "K", K);
      current_statement__ = 201;
      stan::math::validate_non_negative_index("THETAPred_ind", "nSubjects",
                                              nSubjects);
      current_statement__ = 202;
      stan::math::validate_non_negative_index("THETAPred_ind", "K", K);
      current_statement__ = 203;
      stan::math::validate_non_negative_index("XPred", "N", N);
      current_statement__ = 204;
      stan::math::validate_non_negative_index("XPred", "nCmt", nCmt);
      current_statement__ = 205;
      stan::math::validate_non_negative_index("cHatPred", "N", N);
      current_statement__ = 206;
      stan::math::validate_non_negative_index("c_ePred", "N", N);
      current_statement__ = 207;
      stan::math::validate_non_negative_index("effHatPred", "N", N);
      current_statement__ = 208;
      stan::math::validate_non_negative_index("mu_outPred", "N", N);
      current_statement__ = 209;
      stan::math::validate_non_negative_index("mu_outPred", "N_out", N_out);
      current_statement__ = 210;
      stan::math::validate_non_negative_index("outputPred_pop", "N", N);
      current_statement__ = 211;
      stan::math::validate_non_negative_index("outputPred_pop", "N_out",
                                              N_out);
      current_statement__ = 212;
      stan::math::validate_non_negative_index("outputPred_ind", "N", N);
      current_statement__ = 213;
      stan::math::validate_non_negative_index("outputPred_ind", "N_out",
                                              N_out);
      current_statement__ = 214;
      stan::math::validate_non_negative_index("cPred_pop", "N", N);
      current_statement__ = 215;
      stan::math::validate_non_negative_index("cPred_ind", "N", N);
      current_statement__ = 216;
      stan::math::validate_non_negative_index("effPred_pop", "N", N);
      current_statement__ = 217;
      stan::math::validate_non_negative_index("effPred_ind", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + ((K * (K - 1)) / 2) + 
      K + (K * nSubjects) + ((N_out * (N_out - 1)) / 2) + N_out;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "joint_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ CL_pop = DUMMY_VAR__;
      current_statement__ = 1;
      CL_pop = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ Q_pop = DUMMY_VAR__;
      current_statement__ = 2;
      Q_pop = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ VC_pop = DUMMY_VAR__;
      current_statement__ = 3;
      VC_pop = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ VP_pop = DUMMY_VAR__;
      current_statement__ = 4;
      VP_pop = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ ke0_pop = DUMMY_VAR__;
      current_statement__ = 5;
      ke0_pop = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      local_scalar_t__ ka_pop = DUMMY_VAR__;
      current_statement__ = 6;
      ka_pop = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ EC50_pop = DUMMY_VAR__;
      current_statement__ = 7;
      EC50_pop = in__.template read_constrain_lb<local_scalar_t__, 
                   jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, -1> L =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(K, K, DUMMY_VAR__);
      current_statement__ = 8;
      L = in__.template read_constrain_cholesky_factor_corr<
            Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(lp__, K);
      Eigen::Matrix<local_scalar_t__, -1, 1> omega =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 9;
      omega = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__,
                K);
      Eigen::Matrix<local_scalar_t__, -1, -1> etaStd =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(K, nSubjects,
           DUMMY_VAR__);
      current_statement__ = 10;
      etaStd = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(K,
                 nSubjects);
      Eigen::Matrix<local_scalar_t__, -1, -1> L_out =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N_out, N_out,
           DUMMY_VAR__);
      current_statement__ = 11;
      L_out = in__.template read_constrain_cholesky_factor_corr<
                Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(lp__,
                N_out);
      Eigen::Matrix<local_scalar_t__, -1, 1> L_out_sigma =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_out, DUMMY_VAR__);
      current_statement__ = 12;
      L_out_sigma = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                      lp__, N_out);
      Eigen::Matrix<local_scalar_t__, -1, 1> THETA_pop =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 25;
      stan::model::assign(THETA_pop,
        stan::math::to_vector(std::vector<local_scalar_t__>{CL_pop, Q_pop,
          VC_pop, VP_pop, ke0_pop}), "assigning variable THETA_pop");
      Eigen::Matrix<local_scalar_t__, -1, -1> THETA_norm =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(nSubjects, K,
           DUMMY_VAR__);
      current_statement__ = 26;
      stan::model::assign(THETA_norm,
        stan::math::transpose(
          stan::math::elt_multiply(
            stan::math::rep_matrix(THETA_pop, nSubjects),
            stan::math::exp(
              stan::math::diag_pre_multiply(omega,
                stan::math::multiply(L, etaStd))))),
        "assigning variable THETA_norm");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> THETA_ind =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(nSubjects, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(nTheta,
             DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__, -1, -1> X =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, nCmt,
           DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> cHat =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> cHatObs =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(nObsPK,
           DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> c_e =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> effHat =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> effHatObs =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(nObsPK,
           DUMMY_VAR__);
      current_statement__ = 39;
      for (int i = 1; i <= nSubjects; ++i) {
        current_statement__ = 27;
        stan::model::assign(THETA_ind,
          (stan::model::rvalue(THETA_norm, "THETA_norm",
             stan::model::index_uni(i), stan::model::index_uni(1)) *
            stan::math::pow(
              (stan::model::rvalue(weight, "weight",
                 stan::model::index_uni(i)) / 70), 0.75)),
          "assigning variable THETA_ind", stan::model::index_uni(i),
                                            stan::model::index_uni(1));
        current_statement__ = 28;
        stan::model::assign(THETA_ind,
          (stan::model::rvalue(THETA_norm, "THETA_norm",
             stan::model::index_uni(i), stan::model::index_uni(2)) *
            stan::math::pow(
              (stan::model::rvalue(weight, "weight",
                 stan::model::index_uni(i)) / 70), 0.75)),
          "assigning variable THETA_ind", stan::model::index_uni(i),
                                            stan::model::index_uni(2));
        current_statement__ = 29;
        stan::model::assign(THETA_ind,
          (stan::model::rvalue(THETA_norm, "THETA_norm",
             stan::model::index_uni(i), stan::model::index_uni(3)) *
            (stan::model::rvalue(weight, "weight", stan::model::index_uni(i))
              / 70)),
          "assigning variable THETA_ind", stan::model::index_uni(i),
                                            stan::model::index_uni(3));
        current_statement__ = 30;
        stan::model::assign(THETA_ind,
          (stan::model::rvalue(THETA_norm, "THETA_norm",
             stan::model::index_uni(i), stan::model::index_uni(4)) *
            (stan::model::rvalue(weight, "weight", stan::model::index_uni(i))
              / 70)),
          "assigning variable THETA_ind", stan::model::index_uni(i),
                                            stan::model::index_uni(4));
        current_statement__ = 31;
        stan::model::assign(THETA_ind, ka_pop,
          "assigning variable THETA_ind", stan::model::index_uni(i),
                                            stan::model::index_uni(5));
        current_statement__ = 32;
        stan::model::assign(THETA_ind,
          stan::model::rvalue(THETA_norm, "THETA_norm",
            stan::model::index_uni(i), stan::model::index_uni(5)),
          "assigning variable THETA_ind", stan::model::index_uni(i),
                                            stan::model::index_uni(6));
        current_statement__ = 33;
        stan::model::assign(THETA_ind, EC50_pop,
          "assigning variable THETA_ind", stan::model::index_uni(i),
                                            stan::model::index_uni(7));
        current_statement__ = 34;
        stan::model::assign(X,
          solvetwoCptModel(
            stan::model::rvalue(time, "time",
              stan::model::index_min_max(stan::model::rvalue(start, "start",
                                           stan::model::index_uni(i)), 
                stan::model::rvalue(end, "end", stan::model::index_uni(i)))),
            stan::model::rvalue(new_amt, "new_amt",
              stan::model::index_min_max(stan::model::rvalue(start, "start",
                                           stan::model::index_uni(i)), 
                stan::model::rvalue(end, "end", stan::model::index_uni(i)))),
            stan::model::rvalue(new_cmt, "new_cmt",
              stan::model::index_min_max(stan::model::rvalue(start, "start",
                                           stan::model::index_uni(i)), 
                stan::model::rvalue(end, "end", stan::model::index_uni(i)))),
            stan::model::rvalue(new_evid, "new_evid",
              stan::model::index_min_max(stan::model::rvalue(start, "start",
                                           stan::model::index_uni(i)), 
                stan::model::rvalue(end, "end", stan::model::index_uni(i)))),
            stan::model::rvalue(
              stan::model::rvalue(THETA_ind, "THETA_ind", stan::model::index_uni(i)),
              "THETA_ind[i]", stan::model::index_uni(1)),
            stan::model::rvalue(
              stan::model::rvalue(THETA_ind, "THETA_ind", stan::model::index_uni(i)),
              "THETA_ind[i]", stan::model::index_uni(2)),
            stan::model::rvalue(
              stan::model::rvalue(THETA_ind, "THETA_ind", stan::model::index_uni(i)),
              "THETA_ind[i]", stan::model::index_uni(3)),
            stan::model::rvalue(
              stan::model::rvalue(THETA_ind, "THETA_ind", stan::model::index_uni(i)),
              "THETA_ind[i]", stan::model::index_uni(4)),
            stan::model::rvalue(
              stan::model::rvalue(THETA_ind, "THETA_ind", stan::model::index_uni(i)),
              "THETA_ind[i]", stan::model::index_uni(5)),
            stan::model::rvalue(
              stan::model::rvalue(THETA_ind, "THETA_ind", stan::model::index_uni(i)),
              "THETA_ind[i]", stan::model::index_uni(6)), pstream__),
          "assigning variable X", stan::model::index_min_max(stan::model::rvalue(
                                                               start,
                                                               "start",
                                                               stan::model::index_uni(i)), 
                                    stan::model::rvalue(end, "end",
                                      stan::model::index_uni(i))),
                                    stan::model::index_omni());
        current_statement__ = 35;
        stan::model::assign(cHat,
          stan::math::elt_divide(
            stan::model::rvalue(X, "X",
              stan::model::index_min_max(stan::model::rvalue(start, "start",
                                           stan::model::index_uni(i)), 
                stan::model::rvalue(end, "end", stan::model::index_uni(i))),
                stan::model::index_uni(2)),
            stan::model::rvalue(
              stan::model::rvalue(THETA_ind, "THETA_ind", stan::model::index_uni(i)),
              "THETA_ind[i]", stan::model::index_uni(3))),
          "assigning variable cHat", stan::model::index_min_max(stan::model::rvalue(
                                                                  start,
                                                                  "start",
                                                                  stan::model::index_uni(i)), 
                                       stan::model::rvalue(end, "end",
                                         stan::model::index_uni(i))));
        current_statement__ = 36;
        stan::model::assign(c_e,
          stan::math::elt_divide(
            stan::model::rvalue(X, "X",
              stan::model::index_min_max(stan::model::rvalue(start, "start",
                                           stan::model::index_uni(i)), 
                stan::model::rvalue(end, "end", stan::model::index_uni(i))),
                stan::model::index_uni(4)),
            stan::model::rvalue(
              stan::model::rvalue(THETA_ind, "THETA_ind", stan::model::index_uni(i)),
              "THETA_ind[i]", stan::model::index_uni(3))),
          "assigning variable c_e", stan::model::index_min_max(stan::model::rvalue(
                                                                 start,
                                                                 "start",
                                                                 stan::model::index_uni(i)), 
                                      stan::model::rvalue(end, "end",
                                        stan::model::index_uni(i))));
        current_statement__ = 37;
        stan::model::assign(effHat,
          stan::math::elt_divide(
            stan::math::multiply(100,
              stan::model::rvalue(c_e, "c_e",
                stan::model::index_min_max(stan::model::rvalue(start,
                                             "start",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(end, "end", stan::model::index_uni(i))))),
            stan::math::add(
              stan::model::rvalue(
                stan::model::rvalue(THETA_ind, "THETA_ind", stan::model::index_uni(i)),
                "THETA_ind[i]", stan::model::index_uni(7)),
              stan::model::rvalue(c_e, "c_e",
                stan::model::index_min_max(stan::model::rvalue(start,
                                             "start",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(end, "end", stan::model::index_uni(i)))))),
          "assigning variable effHat", stan::model::index_min_max(stan::model::rvalue(
                                                                    start,
                                                                    "start",
                                                                    stan::model::index_uni(i)), 
                                         stan::model::rvalue(end, "end",
                                           stan::model::index_uni(i))));
      }
      current_statement__ = 40;
      stan::model::assign(cHatObs,
        stan::model::rvalue(cHat, "cHat", stan::model::index_multi(iObsPK)),
        "assigning variable cHatObs");
      current_statement__ = 41;
      stan::model::assign(effHatObs,
        stan::model::rvalue(effHat, "effHat",
          stan::model::index_multi(iObsPK)), "assigning variable effHatObs");
      Eigen::Matrix<local_scalar_t__, -1, -1> mu_outHat =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, N_out,
           DUMMY_VAR__);
      current_statement__ = 22;
      stan::model::assign(mu_outHat, stan::math::append_col(cHat, effHat),
        "assigning variable mu_outHat");
      Eigen::Matrix<local_scalar_t__, -1, -1> mu_out =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(nObsPK, N_out,
           DUMMY_VAR__);
      current_statement__ = 23;
      stan::model::assign(mu_out, stan::math::append_col(cHatObs, effHatObs),
        "assigning variable mu_out");
      Eigen::Matrix<local_scalar_t__, -1, -1> Sigma_out =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N_out, N_out,
           DUMMY_VAR__);
      current_statement__ = 42;
      stan::model::assign(Sigma_out,
        stan::math::diag_pre_multiply(L_out_sigma, L_out),
        "assigning variable Sigma_out");
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "THETA_pop", THETA_pop,
                                            0);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "THETA_norm",
                                            THETA_norm, 0);
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "THETA_ind", THETA_ind,
                                            0);
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "c_e", c_e, 0);
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "effHat", effHat, 0);
      {
        current_statement__ = 86;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::math::log(
              stan::model::rvalue(THETA_pop, "THETA_pop",
                stan::model::index_uni(1))), stan::math::log(10), 1));
        current_statement__ = 87;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::math::log(
              stan::model::rvalue(THETA_pop, "THETA_pop",
                stan::model::index_uni(2))), stan::math::log(10), 1));
        current_statement__ = 88;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::math::log(
              stan::model::rvalue(THETA_pop, "THETA_pop",
                stan::model::index_uni(3))), stan::math::log(30), 1));
        current_statement__ = 89;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::math::log(
              stan::model::rvalue(THETA_pop, "THETA_pop",
                stan::model::index_uni(4))), stan::math::log(100), 1));
        current_statement__ = 90;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(stan::math::log(ka_pop),
            stan::math::log(2), 1));
        current_statement__ = 91;
        lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(L, 1));
        current_statement__ = 92;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(stan::math::to_vector(etaStd), 0,
            1));
        current_statement__ = 93;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(omega, 0, 0.5));
        current_statement__ = 94;
        lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(L_out, 1));
        current_statement__ = 95;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(L_out_sigma, 0, 2.5));
        current_statement__ = 98;
        for (int i = 1; i <= nObsPK; ++i) {
          current_statement__ = 96;
          lp_accum__.add(
            stan::math::multi_normal_cholesky_lpdf<propto__>(
              stan::math::log(
                stan::model::rvalue(output, "output",
                  stan::model::index_uni(i), stan::model::index_omni())),
              stan::math::log(
                stan::model::rvalue(mu_out, "mu_out",
                  stan::model::index_uni(i), stan::model::index_omni())),
              Sigma_out));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "joint_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double CL_pop = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      CL_pop = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double Q_pop = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      Q_pop = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double VC_pop = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      VC_pop = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double VP_pop = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      VP_pop = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double ke0_pop = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      ke0_pop = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      double ka_pop = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      ka_pop = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double EC50_pop = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      EC50_pop = in__.template read_constrain_lb<local_scalar_t__, 
                   jacobian__>(0, lp__);
      Eigen::Matrix<double, -1, -1> L =
         Eigen::Matrix<double, -1, -1>::Constant(K, K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      L = in__.template read_constrain_cholesky_factor_corr<
            Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(lp__, K);
      Eigen::Matrix<double, -1, 1> omega =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      omega = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__,
                K);
      Eigen::Matrix<double, -1, -1> etaStd =
         Eigen::Matrix<double, -1, -1>::Constant(K, nSubjects,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 10;
      etaStd = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(K,
                 nSubjects);
      Eigen::Matrix<double, -1, -1> L_out =
         Eigen::Matrix<double, -1, -1>::Constant(N_out, N_out,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      L_out = in__.template read_constrain_cholesky_factor_corr<
                Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(lp__,
                N_out);
      Eigen::Matrix<double, -1, 1> L_out_sigma =
         Eigen::Matrix<double, -1, 1>::Constant(N_out,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      L_out_sigma = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                      lp__, N_out);
      Eigen::Matrix<double, -1, 1> THETA_pop =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> THETA_norm =
         Eigen::Matrix<double, -1, -1>::Constant(nSubjects, K,
           std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double, -1, 1>> THETA_ind =
         std::vector<Eigen::Matrix<double, -1, 1>>(nSubjects, 
           Eigen::Matrix<double, -1, 1>::Constant(nTheta,
             std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double, -1, -1> X =
         Eigen::Matrix<double, -1, -1>::Constant(N, nCmt,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> cHat =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> cHatObs =
         Eigen::Matrix<double, -1, 1>::Constant(nObsPK,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> c_e =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> effHat =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> effHatObs =
         Eigen::Matrix<double, -1, 1>::Constant(nObsPK,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> mu_outHat =
         Eigen::Matrix<double, -1, -1>::Constant(N, N_out,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> mu_out =
         Eigen::Matrix<double, -1, -1>::Constant(nObsPK, N_out,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> Sigma_out =
         Eigen::Matrix<double, -1, -1>::Constant(N_out, N_out,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(CL_pop);
      out__.write(Q_pop);
      out__.write(VC_pop);
      out__.write(VP_pop);
      out__.write(ke0_pop);
      out__.write(ka_pop);
      out__.write(EC50_pop);
      out__.write(L);
      out__.write(omega);
      out__.write(etaStd);
      out__.write(L_out);
      out__.write(L_out_sigma);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 25;
      stan::model::assign(THETA_pop,
        stan::math::to_vector(std::vector<local_scalar_t__>{CL_pop, Q_pop,
          VC_pop, VP_pop, ke0_pop}), "assigning variable THETA_pop");
      current_statement__ = 26;
      stan::model::assign(THETA_norm,
        stan::math::transpose(
          stan::math::elt_multiply(
            stan::math::rep_matrix(THETA_pop, nSubjects),
            stan::math::exp(
              stan::math::diag_pre_multiply(omega,
                stan::math::multiply(L, etaStd))))),
        "assigning variable THETA_norm");
      current_statement__ = 39;
      for (int i = 1; i <= nSubjects; ++i) {
        current_statement__ = 27;
        stan::model::assign(THETA_ind,
          (stan::model::rvalue(THETA_norm, "THETA_norm",
             stan::model::index_uni(i), stan::model::index_uni(1)) *
            stan::math::pow(
              (stan::model::rvalue(weight, "weight",
                 stan::model::index_uni(i)) / 70), 0.75)),
          "assigning variable THETA_ind", stan::model::index_uni(i),
                                            stan::model::index_uni(1));
        current_statement__ = 28;
        stan::model::assign(THETA_ind,
          (stan::model::rvalue(THETA_norm, "THETA_norm",
             stan::model::index_uni(i), stan::model::index_uni(2)) *
            stan::math::pow(
              (stan::model::rvalue(weight, "weight",
                 stan::model::index_uni(i)) / 70), 0.75)),
          "assigning variable THETA_ind", stan::model::index_uni(i),
                                            stan::model::index_uni(2));
        current_statement__ = 29;
        stan::model::assign(THETA_ind,
          (stan::model::rvalue(THETA_norm, "THETA_norm",
             stan::model::index_uni(i), stan::model::index_uni(3)) *
            (stan::model::rvalue(weight, "weight", stan::model::index_uni(i))
              / 70)),
          "assigning variable THETA_ind", stan::model::index_uni(i),
                                            stan::model::index_uni(3));
        current_statement__ = 30;
        stan::model::assign(THETA_ind,
          (stan::model::rvalue(THETA_norm, "THETA_norm",
             stan::model::index_uni(i), stan::model::index_uni(4)) *
            (stan::model::rvalue(weight, "weight", stan::model::index_uni(i))
              / 70)),
          "assigning variable THETA_ind", stan::model::index_uni(i),
                                            stan::model::index_uni(4));
        current_statement__ = 31;
        stan::model::assign(THETA_ind, ka_pop,
          "assigning variable THETA_ind", stan::model::index_uni(i),
                                            stan::model::index_uni(5));
        current_statement__ = 32;
        stan::model::assign(THETA_ind,
          stan::model::rvalue(THETA_norm, "THETA_norm",
            stan::model::index_uni(i), stan::model::index_uni(5)),
          "assigning variable THETA_ind", stan::model::index_uni(i),
                                            stan::model::index_uni(6));
        current_statement__ = 33;
        stan::model::assign(THETA_ind, EC50_pop,
          "assigning variable THETA_ind", stan::model::index_uni(i),
                                            stan::model::index_uni(7));
        current_statement__ = 34;
        stan::model::assign(X,
          solvetwoCptModel(
            stan::model::rvalue(time, "time",
              stan::model::index_min_max(stan::model::rvalue(start, "start",
                                           stan::model::index_uni(i)), 
                stan::model::rvalue(end, "end", stan::model::index_uni(i)))),
            stan::model::rvalue(new_amt, "new_amt",
              stan::model::index_min_max(stan::model::rvalue(start, "start",
                                           stan::model::index_uni(i)), 
                stan::model::rvalue(end, "end", stan::model::index_uni(i)))),
            stan::model::rvalue(new_cmt, "new_cmt",
              stan::model::index_min_max(stan::model::rvalue(start, "start",
                                           stan::model::index_uni(i)), 
                stan::model::rvalue(end, "end", stan::model::index_uni(i)))),
            stan::model::rvalue(new_evid, "new_evid",
              stan::model::index_min_max(stan::model::rvalue(start, "start",
                                           stan::model::index_uni(i)), 
                stan::model::rvalue(end, "end", stan::model::index_uni(i)))),
            stan::model::rvalue(
              stan::model::rvalue(THETA_ind, "THETA_ind", stan::model::index_uni(i)),
              "THETA_ind[i]", stan::model::index_uni(1)),
            stan::model::rvalue(
              stan::model::rvalue(THETA_ind, "THETA_ind", stan::model::index_uni(i)),
              "THETA_ind[i]", stan::model::index_uni(2)),
            stan::model::rvalue(
              stan::model::rvalue(THETA_ind, "THETA_ind", stan::model::index_uni(i)),
              "THETA_ind[i]", stan::model::index_uni(3)),
            stan::model::rvalue(
              stan::model::rvalue(THETA_ind, "THETA_ind", stan::model::index_uni(i)),
              "THETA_ind[i]", stan::model::index_uni(4)),
            stan::model::rvalue(
              stan::model::rvalue(THETA_ind, "THETA_ind", stan::model::index_uni(i)),
              "THETA_ind[i]", stan::model::index_uni(5)),
            stan::model::rvalue(
              stan::model::rvalue(THETA_ind, "THETA_ind", stan::model::index_uni(i)),
              "THETA_ind[i]", stan::model::index_uni(6)), pstream__),
          "assigning variable X", stan::model::index_min_max(stan::model::rvalue(
                                                               start,
                                                               "start",
                                                               stan::model::index_uni(i)), 
                                    stan::model::rvalue(end, "end",
                                      stan::model::index_uni(i))),
                                    stan::model::index_omni());
        current_statement__ = 35;
        stan::model::assign(cHat,
          stan::math::elt_divide(
            stan::model::rvalue(X, "X",
              stan::model::index_min_max(stan::model::rvalue(start, "start",
                                           stan::model::index_uni(i)), 
                stan::model::rvalue(end, "end", stan::model::index_uni(i))),
                stan::model::index_uni(2)),
            stan::model::rvalue(
              stan::model::rvalue(THETA_ind, "THETA_ind", stan::model::index_uni(i)),
              "THETA_ind[i]", stan::model::index_uni(3))),
          "assigning variable cHat", stan::model::index_min_max(stan::model::rvalue(
                                                                  start,
                                                                  "start",
                                                                  stan::model::index_uni(i)), 
                                       stan::model::rvalue(end, "end",
                                         stan::model::index_uni(i))));
        current_statement__ = 36;
        stan::model::assign(c_e,
          stan::math::elt_divide(
            stan::model::rvalue(X, "X",
              stan::model::index_min_max(stan::model::rvalue(start, "start",
                                           stan::model::index_uni(i)), 
                stan::model::rvalue(end, "end", stan::model::index_uni(i))),
                stan::model::index_uni(4)),
            stan::model::rvalue(
              stan::model::rvalue(THETA_ind, "THETA_ind", stan::model::index_uni(i)),
              "THETA_ind[i]", stan::model::index_uni(3))),
          "assigning variable c_e", stan::model::index_min_max(stan::model::rvalue(
                                                                 start,
                                                                 "start",
                                                                 stan::model::index_uni(i)), 
                                      stan::model::rvalue(end, "end",
                                        stan::model::index_uni(i))));
        current_statement__ = 37;
        stan::model::assign(effHat,
          stan::math::elt_divide(
            stan::math::multiply(100,
              stan::model::rvalue(c_e, "c_e",
                stan::model::index_min_max(stan::model::rvalue(start,
                                             "start",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(end, "end", stan::model::index_uni(i))))),
            stan::math::add(
              stan::model::rvalue(
                stan::model::rvalue(THETA_ind, "THETA_ind", stan::model::index_uni(i)),
                "THETA_ind[i]", stan::model::index_uni(7)),
              stan::model::rvalue(c_e, "c_e",
                stan::model::index_min_max(stan::model::rvalue(start,
                                             "start",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(end, "end", stan::model::index_uni(i)))))),
          "assigning variable effHat", stan::model::index_min_max(stan::model::rvalue(
                                                                    start,
                                                                    "start",
                                                                    stan::model::index_uni(i)), 
                                         stan::model::rvalue(end, "end",
                                           stan::model::index_uni(i))));
      }
      current_statement__ = 40;
      stan::model::assign(cHatObs,
        stan::model::rvalue(cHat, "cHat", stan::model::index_multi(iObsPK)),
        "assigning variable cHatObs");
      current_statement__ = 41;
      stan::model::assign(effHatObs,
        stan::model::rvalue(effHat, "effHat",
          stan::model::index_multi(iObsPK)), "assigning variable effHatObs");
      current_statement__ = 22;
      stan::model::assign(mu_outHat, stan::math::append_col(cHat, effHat),
        "assigning variable mu_outHat");
      current_statement__ = 23;
      stan::model::assign(mu_out, stan::math::append_col(cHatObs, effHatObs),
        "assigning variable mu_out");
      current_statement__ = 42;
      stan::model::assign(Sigma_out,
        stan::math::diag_pre_multiply(L_out_sigma, L_out),
        "assigning variable Sigma_out");
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "THETA_pop", THETA_pop,
                                            0);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "THETA_norm",
                                            THETA_norm, 0);
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "THETA_ind", THETA_ind,
                                            0);
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "c_e", c_e, 0);
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "effHat", effHat, 0);
      if (emit_transformed_parameters__) {
        out__.write(THETA_pop);
        out__.write(THETA_norm);
        for (int sym1__ = 1; sym1__ <= nTheta; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            out__.write(THETA_ind[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(X);
        out__.write(cHat);
        out__.write(cHatObs);
        out__.write(c_e);
        out__.write(effHat);
        out__.write(effHatObs);
        out__.write(mu_outHat);
        out__.write(mu_out);
        out__.write(Sigma_out);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, -1> Omega_out =
         Eigen::Matrix<double, -1, -1>::Constant(N_out, N_out,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 43;
      stan::model::assign(Omega_out,
        stan::math::multiply(Sigma_out, stan::math::transpose(Sigma_out)),
        "assigning variable Omega_out");
      Eigen::Matrix<double, -1, -1> R_out =
         Eigen::Matrix<double, -1, -1>::Constant(N_out, N_out,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 44;
      stan::model::assign(R_out,
        stan::math::multiply(L_out, stan::math::transpose(L_out)),
        "assigning variable R_out");
      Eigen::Matrix<double, -1, -1> etaStdPred =
         Eigen::Matrix<double, -1, -1>::Constant(K, nSubjects,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> THETAPred_norm =
         Eigen::Matrix<double, -1, -1>::Constant(nSubjects, K,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> THETAPred_ind =
         Eigen::Matrix<double, -1, -1>::Constant(nSubjects, K,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> XPred =
         Eigen::Matrix<double, -1, -1>::Constant(N, nCmt,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> cHatPred =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> c_ePred =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> effHatPred =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> mu_outPred =
         Eigen::Matrix<double, -1, -1>::Constant(N, N_out,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> outputPred_pop =
         Eigen::Matrix<double, -1, -1>::Constant(N, N_out,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> outputPred_ind =
         Eigen::Matrix<double, -1, -1>::Constant(N, N_out,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 59;
      for (int i = 1; i <= nSubjects; ++i) {
        current_statement__ = 57;
        for (int j = 1; j <= K; ++j) {
          current_statement__ = 55;
          stan::model::assign(etaStdPred,
            stan::math::normal_rng(0, 1, base_rng__),
            "assigning variable etaStdPred", stan::model::index_uni(j),
                                               stan::model::index_uni(i));
        }
      }
      current_statement__ = 60;
      stan::model::assign(THETAPred_norm,
        stan::math::transpose(
          stan::math::elt_multiply(
            stan::math::rep_matrix(THETA_pop, nSubjects),
            stan::math::exp(
              stan::math::diag_pre_multiply(omega,
                stan::math::multiply(L, etaStdPred))))),
        "assigning variable THETAPred_norm");
      current_statement__ = 71;
      for (int i = 1; i <= nSubjects; ++i) {
        current_statement__ = 61;
        stan::model::assign(THETAPred_ind,
          (stan::model::rvalue(THETAPred_norm, "THETAPred_norm",
             stan::model::index_uni(i), stan::model::index_uni(1)) *
            stan::math::pow(
              (stan::model::rvalue(weight, "weight",
                 stan::model::index_uni(i)) / 70), 0.75)),
          "assigning variable THETAPred_ind", stan::model::index_uni(i),
                                                stan::model::index_uni(1));
        current_statement__ = 62;
        stan::model::assign(THETAPred_ind,
          (stan::model::rvalue(THETAPred_norm, "THETAPred_norm",
             stan::model::index_uni(i), stan::model::index_uni(2)) *
            stan::math::pow(
              (stan::model::rvalue(weight, "weight",
                 stan::model::index_uni(i)) / 70), 0.75)),
          "assigning variable THETAPred_ind", stan::model::index_uni(i),
                                                stan::model::index_uni(2));
        current_statement__ = 63;
        stan::model::assign(THETAPred_ind,
          (stan::model::rvalue(THETAPred_norm, "THETAPred_norm",
             stan::model::index_uni(i), stan::model::index_uni(3)) *
            (stan::model::rvalue(weight, "weight", stan::model::index_uni(i))
              / 70)),
          "assigning variable THETAPred_ind", stan::model::index_uni(i),
                                                stan::model::index_uni(3));
        current_statement__ = 64;
        stan::model::assign(THETAPred_ind,
          (stan::model::rvalue(THETAPred_norm, "THETAPred_norm",
             stan::model::index_uni(i), stan::model::index_uni(4)) *
            (stan::model::rvalue(weight, "weight", stan::model::index_uni(i))
              / 70)),
          "assigning variable THETAPred_ind", stan::model::index_uni(i),
                                                stan::model::index_uni(4));
        current_statement__ = 65;
        stan::model::assign(THETAPred_ind,
          stan::model::rvalue(THETAPred_norm, "THETAPred_norm",
            stan::model::index_uni(i), stan::model::index_uni(5)),
          "assigning variable THETAPred_ind", stan::model::index_uni(i),
                                                stan::model::index_uni(5));
        current_statement__ = 66;
        stan::model::assign(XPred,
          solvetwoCptModel(
            stan::model::rvalue(time, "time",
              stan::model::index_min_max(stan::model::rvalue(start, "start",
                                           stan::model::index_uni(i)), 
                stan::model::rvalue(end, "end", stan::model::index_uni(i)))),
            stan::model::rvalue(new_amt, "new_amt",
              stan::model::index_min_max(stan::model::rvalue(start, "start",
                                           stan::model::index_uni(i)), 
                stan::model::rvalue(end, "end", stan::model::index_uni(i)))),
            stan::model::rvalue(new_cmt, "new_cmt",
              stan::model::index_min_max(stan::model::rvalue(start, "start",
                                           stan::model::index_uni(i)), 
                stan::model::rvalue(end, "end", stan::model::index_uni(i)))),
            stan::model::rvalue(new_evid, "new_evid",
              stan::model::index_min_max(stan::model::rvalue(start, "start",
                                           stan::model::index_uni(i)), 
                stan::model::rvalue(end, "end", stan::model::index_uni(i)))),
            stan::model::rvalue(
              stan::model::rvalue(THETAPred_ind, "THETAPred_ind",
  stan::model::index_uni(i)),
              "THETAPred_ind[i]", stan::model::index_uni(1)),
            stan::model::rvalue(
              stan::model::rvalue(THETAPred_ind, "THETAPred_ind",
  stan::model::index_uni(i)),
              "THETAPred_ind[i]", stan::model::index_uni(2)),
            stan::model::rvalue(
              stan::model::rvalue(THETAPred_ind, "THETAPred_ind",
  stan::model::index_uni(i)),
              "THETAPred_ind[i]", stan::model::index_uni(3)),
            stan::model::rvalue(
              stan::model::rvalue(THETAPred_ind, "THETAPred_ind",
  stan::model::index_uni(i)),
              "THETAPred_ind[i]", stan::model::index_uni(4)), ka_pop,
            stan::model::rvalue(
              stan::model::rvalue(THETAPred_ind, "THETAPred_ind",
  stan::model::index_uni(i)),
              "THETAPred_ind[i]", stan::model::index_uni(5)), pstream__),
          "assigning variable XPred", stan::model::index_min_max(stan::model::rvalue(
                                                                   start,
                                                                   "start",
                                                                   stan::model::index_uni(i)), 
                                        stan::model::rvalue(end, "end",
                                          stan::model::index_uni(i))),
                                        stan::model::index_omni());
        current_statement__ = 67;
        stan::model::assign(cHatPred,
          stan::math::elt_divide(
            stan::model::rvalue(XPred, "XPred",
              stan::model::index_min_max(stan::model::rvalue(start, "start",
                                           stan::model::index_uni(i)), 
                stan::model::rvalue(end, "end", stan::model::index_uni(i))),
                stan::model::index_uni(2)),
            stan::model::rvalue(
              stan::model::rvalue(THETAPred_ind, "THETAPred_ind",
  stan::model::index_uni(i)),
              "THETAPred_ind[i]", stan::model::index_uni(3))),
          "assigning variable cHatPred", stan::model::index_min_max(stan::model::rvalue(
                                                                    start,
                                                                    "start",
                                                                    stan::model::index_uni(i)), 
                                           stan::model::rvalue(end, "end",
                                             stan::model::index_uni(i))));
        current_statement__ = 68;
        stan::model::assign(c_ePred,
          stan::math::elt_divide(
            stan::model::rvalue(XPred, "XPred",
              stan::model::index_min_max(stan::model::rvalue(start, "start",
                                           stan::model::index_uni(i)), 
                stan::model::rvalue(end, "end", stan::model::index_uni(i))),
                stan::model::index_uni(4)),
            stan::model::rvalue(
              stan::model::rvalue(THETAPred_ind, "THETAPred_ind",
  stan::model::index_uni(i)),
              "THETAPred_ind[i]", stan::model::index_uni(3))),
          "assigning variable c_ePred", stan::model::index_min_max(stan::model::rvalue(
                                                                    start,
                                                                    "start",
                                                                    stan::model::index_uni(i)), 
                                          stan::model::rvalue(end, "end",
                                            stan::model::index_uni(i))));
        current_statement__ = 69;
        stan::model::assign(effHatPred,
          stan::math::elt_divide(
            stan::math::multiply(100,
              stan::model::rvalue(c_ePred, "c_ePred",
                stan::model::index_min_max(stan::model::rvalue(start,
                                             "start",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(end, "end", stan::model::index_uni(i))))),
            stan::math::add(EC50_pop,
              stan::model::rvalue(c_ePred, "c_ePred",
                stan::model::index_min_max(stan::model::rvalue(start,
                                             "start",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(end, "end", stan::model::index_uni(i)))))),
          "assigning variable effHatPred", stan::model::index_min_max(
                                             stan::model::rvalue(start,
                                               "start",
                                               stan::model::index_uni(i)), 
                                             stan::model::rvalue(end, "end",
                                               stan::model::index_uni(i))));
      }
      current_statement__ = 72;
      stan::model::assign(mu_outPred,
        stan::math::append_col(cHatPred, effHatPred),
        "assigning variable mu_outPred");
      current_statement__ = 81;
      for (int t = 1; t <= N; ++t) {
        current_statement__ = 79;
        if (stan::math::logical_eq(
              stan::model::rvalue(time, "time", stan::model::index_uni(t)),
              0)) {
          current_statement__ = 76;
          stan::model::assign(outputPred_pop,
            stan::math::rep_row_vector(0, 2),
            "assigning variable outputPred_pop", stan::model::index_uni(t),
                                                   stan::model::index_omni());
          current_statement__ = 77;
          stan::model::assign(outputPred_ind,
            stan::math::rep_row_vector(0, 2),
            "assigning variable outputPred_ind", stan::model::index_uni(t),
                                                   stan::model::index_omni());
        } else {
          current_statement__ = 73;
          stan::model::assign(outputPred_pop,
            stan::math::exp(
              stan::math::transpose(
                stan::math::multi_normal_rng(
                  stan::math::log(
                    stan::math::fmax(stan::math::machine_precision(),
                      stan::model::rvalue(mu_outPred, "mu_outPred",
                        stan::model::index_uni(t), stan::model::index_omni()))),
                  Omega_out, base_rng__))),
            "assigning variable outputPred_pop", stan::model::index_uni(t),
                                                   stan::model::index_omni());
          current_statement__ = 74;
          stan::model::assign(outputPred_ind,
            stan::math::exp(
              stan::math::transpose(
                stan::math::multi_normal_rng(
                  stan::math::log(
                    stan::math::fmax(stan::math::machine_precision(),
                      stan::model::rvalue(mu_outHat, "mu_outHat",
                        stan::model::index_uni(t), stan::model::index_omni()))),
                  Omega_out, base_rng__))),
            "assigning variable outputPred_ind", stan::model::index_uni(t),
                                                   stan::model::index_omni());
        }
      }
      Eigen::Matrix<double, -1, 1> cPred_pop =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 82;
      stan::model::assign(cPred_pop,
        stan::model::rvalue(outputPred_pop, "outputPred_pop",
          stan::model::index_omni(), stan::model::index_uni(1)),
        "assigning variable cPred_pop");
      Eigen::Matrix<double, -1, 1> cPred_ind =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 83;
      stan::model::assign(cPred_ind,
        stan::model::rvalue(outputPred_ind, "outputPred_ind",
          stan::model::index_omni(), stan::model::index_uni(1)),
        "assigning variable cPred_ind");
      Eigen::Matrix<double, -1, 1> effPred_pop =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 84;
      stan::model::assign(effPred_pop,
        stan::model::rvalue(outputPred_pop, "outputPred_pop",
          stan::model::index_omni(), stan::model::index_uni(2)),
        "assigning variable effPred_pop");
      Eigen::Matrix<double, -1, 1> effPred_ind =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 85;
      stan::model::assign(effPred_ind,
        stan::model::rvalue(outputPred_ind, "outputPred_ind",
          stan::model::index_omni(), stan::model::index_uni(2)),
        "assigning variable effPred_ind");
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "THETAPred_norm",
                                            THETAPred_norm, 0);
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "THETAPred_ind",
                                            THETAPred_ind, 0);
      out__.write(Omega_out);
      out__.write(R_out);
      out__.write(etaStdPred);
      out__.write(THETAPred_norm);
      out__.write(THETAPred_ind);
      out__.write(XPred);
      out__.write(cHatPred);
      out__.write(c_ePred);
      out__.write(effHatPred);
      out__.write(mu_outPred);
      out__.write(outputPred_pop);
      out__.write(outputPred_ind);
      out__.write(cPred_pop);
      out__.write(cPred_ind);
      out__.write(effPred_pop);
      out__.write(effPred_ind);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ CL_pop = DUMMY_VAR__;
      CL_pop = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, CL_pop);
      local_scalar_t__ Q_pop = DUMMY_VAR__;
      Q_pop = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, Q_pop);
      local_scalar_t__ VC_pop = DUMMY_VAR__;
      VC_pop = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, VC_pop);
      local_scalar_t__ VP_pop = DUMMY_VAR__;
      VP_pop = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, VP_pop);
      local_scalar_t__ ke0_pop = DUMMY_VAR__;
      ke0_pop = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, ke0_pop);
      local_scalar_t__ ka_pop = DUMMY_VAR__;
      ka_pop = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, ka_pop);
      local_scalar_t__ EC50_pop = DUMMY_VAR__;
      EC50_pop = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, EC50_pop);
      Eigen::Matrix<local_scalar_t__, -1, -1> L =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(K, K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          stan::model::assign(L, in__.read<local_scalar_t__>(),
            "assigning variable L", stan::model::index_uni(sym2__),
                                      stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_cholesky_factor_corr(L);
      Eigen::Matrix<local_scalar_t__, -1, 1> omega =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(omega, in__.read<local_scalar_t__>(),
          "assigning variable omega", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, omega);
      Eigen::Matrix<local_scalar_t__, -1, -1> etaStd =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(K, nSubjects,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          stan::model::assign(etaStd, in__.read<local_scalar_t__>(),
            "assigning variable etaStd", stan::model::index_uni(sym2__),
                                           stan::model::index_uni(sym1__));
        }
      }
      out__.write(etaStd);
      Eigen::Matrix<local_scalar_t__, -1, -1> L_out =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N_out, N_out,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_out; ++sym2__) {
          stan::model::assign(L_out, in__.read<local_scalar_t__>(),
            "assigning variable L_out", stan::model::index_uni(sym2__),
                                          stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_cholesky_factor_corr(L_out);
      Eigen::Matrix<local_scalar_t__, -1, 1> L_out_sigma =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_out, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
        stan::model::assign(L_out_sigma, in__.read<local_scalar_t__>(),
          "assigning variable L_out_sigma", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, L_out_sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"CL_pop", "Q_pop", "VC_pop", "VP_pop",
      "ke0_pop", "ka_pop", "EC50_pop", "L", "omega", "etaStd", "L_out",
      "L_out_sigma", "THETA_pop", "THETA_norm", "THETA_ind", "X", "cHat",
      "cHatObs", "c_e", "effHat", "effHatObs", "mu_outHat", "mu_out",
      "Sigma_out", "Omega_out", "R_out", "etaStdPred", "THETAPred_norm",
      "THETAPred_ind", "XPred", "cHatPred", "c_ePred", "effHatPred",
      "mu_outPred", "outputPred_pop", "outputPred_ind", "cPred_pop",
      "cPred_ind", "effPred_pop", "effPred_ind"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K),
                          static_cast<size_t>(nSubjects)},
      std::vector<size_t>{static_cast<size_t>(N_out),
                          static_cast<size_t>(N_out)},
      std::vector<size_t>{static_cast<size_t>(N_out)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(nSubjects),
                          static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(nSubjects),
                          static_cast<size_t>(nTheta)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(nCmt)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(nObsPK)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(nObsPK)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N_out)},
      std::vector<size_t>{static_cast<size_t>(nObsPK),
                          static_cast<size_t>(N_out)},
      std::vector<size_t>{static_cast<size_t>(N_out),
                          static_cast<size_t>(N_out)},
      std::vector<size_t>{static_cast<size_t>(N_out),
                          static_cast<size_t>(N_out)},
      std::vector<size_t>{static_cast<size_t>(N_out),
                          static_cast<size_t>(N_out)},
      std::vector<size_t>{static_cast<size_t>(K),
                          static_cast<size_t>(nSubjects)},
      std::vector<size_t>{static_cast<size_t>(nSubjects),
                          static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(nSubjects),
                          static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(nCmt)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N_out)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N_out)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N_out)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "CL_pop");
    param_names__.emplace_back(std::string() + "Q_pop");
    param_names__.emplace_back(std::string() + "VC_pop");
    param_names__.emplace_back(std::string() + "VP_pop");
    param_names__.emplace_back(std::string() + "ke0_pop");
    param_names__.emplace_back(std::string() + "ka_pop");
    param_names__.emplace_back(std::string() + "EC50_pop");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "omega" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "etaStd" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N_out; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L_out" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L_out_sigma" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "THETA_pop" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "THETA_norm" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nTheta; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "THETA_ind" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nCmt; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "X" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cHat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nObsPK; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cHatObs" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "c_e" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "effHat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nObsPK; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "effHatObs" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "mu_outHat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nObsPK; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "mu_out" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_out; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_out" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_out; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Omega_out" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_out; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "R_out" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "etaStdPred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "THETAPred_norm" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "THETAPred_ind" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nCmt; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "XPred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cHatPred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "c_ePred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "effHatPred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "mu_outPred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "outputPred_pop" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "outputPred_ind" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cPred_pop" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cPred_ind" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "effPred_pop" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "effPred_ind" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "CL_pop");
    param_names__.emplace_back(std::string() + "Q_pop");
    param_names__.emplace_back(std::string() + "VC_pop");
    param_names__.emplace_back(std::string() + "VP_pop");
    param_names__.emplace_back(std::string() + "ke0_pop");
    param_names__.emplace_back(std::string() + "ka_pop");
    param_names__.emplace_back(std::string() + "EC50_pop");
    for (int sym1__ = 1; sym1__ <= ((K * (K - 1)) / 2); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "omega" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "etaStd" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= ((N_out * (N_out - 1)) / 2); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L_out" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L_out_sigma" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "THETA_pop" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "THETA_norm" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nTheta; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "THETA_ind" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nCmt; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "X" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cHat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nObsPK; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cHatObs" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "c_e" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "effHat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nObsPK; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "effHatObs" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "mu_outHat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nObsPK; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "mu_out" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_out; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_out" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_out; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Omega_out" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_out; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "R_out" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "etaStdPred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "THETAPred_norm" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "THETAPred_ind" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nCmt; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "XPred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cHatPred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "c_ePred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "effHatPred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "mu_outPred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "outputPred_pop" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_out; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "outputPred_ind" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cPred_pop" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cPred_ind" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "effPred_pop" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "effPred_ind" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"CL_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Q_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"VC_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"VP_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ke0_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ka_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"EC50_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"etaStd\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(nSubjects) + "},\"block\":\"parameters\"},{\"name\":\"L_out\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_out) + ",\"cols\":" + std::to_string(N_out) + "},\"block\":\"parameters\"},{\"name\":\"L_out_sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_out) + "},\"block\":\"parameters\"},{\"name\":\"THETA_pop\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"THETA_norm\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"THETA_ind\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nSubjects) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(nTheta) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"X\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(nCmt) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cHat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cHatObs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nObsPK) + "},\"block\":\"transformed_parameters\"},{\"name\":\"c_e\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"effHat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"effHatObs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nObsPK) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_outHat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N_out) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_out\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nObsPK) + ",\"cols\":" + std::to_string(N_out) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma_out\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_out) + ",\"cols\":" + std::to_string(N_out) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Omega_out\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_out) + ",\"cols\":" + std::to_string(N_out) + "},\"block\":\"generated_quantities\"},{\"name\":\"R_out\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_out) + ",\"cols\":" + std::to_string(N_out) + "},\"block\":\"generated_quantities\"},{\"name\":\"etaStdPred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(nSubjects) + "},\"block\":\"generated_quantities\"},{\"name\":\"THETAPred_norm\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"THETAPred_ind\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"XPred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(nCmt) + "},\"block\":\"generated_quantities\"},{\"name\":\"cHatPred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"c_ePred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"effHatPred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu_outPred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N_out) + "},\"block\":\"generated_quantities\"},{\"name\":\"outputPred_pop\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N_out) + "},\"block\":\"generated_quantities\"},{\"name\":\"outputPred_ind\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N_out) + "},\"block\":\"generated_quantities\"},{\"name\":\"cPred_pop\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"cPred_ind\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"effPred_pop\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"effPred_ind\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"CL_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Q_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"VC_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"VP_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ke0_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ka_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"EC50_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((K * (K - 1)) / 2)) + "},\"block\":\"parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"etaStd\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(nSubjects) + "},\"block\":\"parameters\"},{\"name\":\"L_out\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((N_out * (N_out - 1)) / 2)) + "},\"block\":\"parameters\"},{\"name\":\"L_out_sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_out) + "},\"block\":\"parameters\"},{\"name\":\"THETA_pop\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"THETA_norm\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"THETA_ind\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nSubjects) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(nTheta) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"X\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(nCmt) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cHat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cHatObs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nObsPK) + "},\"block\":\"transformed_parameters\"},{\"name\":\"c_e\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"effHat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"effHatObs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nObsPK) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_outHat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N_out) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_out\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nObsPK) + ",\"cols\":" + std::to_string(N_out) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma_out\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_out) + ",\"cols\":" + std::to_string(N_out) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Omega_out\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_out) + ",\"cols\":" + std::to_string(N_out) + "},\"block\":\"generated_quantities\"},{\"name\":\"R_out\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_out) + ",\"cols\":" + std::to_string(N_out) + "},\"block\":\"generated_quantities\"},{\"name\":\"etaStdPred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(nSubjects) + "},\"block\":\"generated_quantities\"},{\"name\":\"THETAPred_norm\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"THETAPred_ind\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"XPred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(nCmt) + "},\"block\":\"generated_quantities\"},{\"name\":\"cHatPred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"c_ePred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"effHatPred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu_outPred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N_out) + "},\"block\":\"generated_quantities\"},{\"name\":\"outputPred_pop\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N_out) + "},\"block\":\"generated_quantities\"},{\"name\":\"outputPred_ind\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N_out) + "},\"block\":\"generated_quantities\"},{\"name\":\"cPred_pop\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"cPred_ind\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"effPred_pop\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"effPred_ind\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + (K * K)) + K) +
      (K * nSubjects)) + (N_out * N_out)) + N_out);
      const size_t num_transformed = 
  (((((((((((K + (nSubjects * K)) + (nSubjects * nTheta)) + (N * nCmt)) + N)
          + nObsPK) + N) + N) + nObsPK) + (N * N_out)) + (nObsPK * N_out)) +
    (N_out * N_out));
      const size_t num_gen_quantities = ((((((((((((((((N_out
                                                                    * N_out)
                                                                    +
                                                                    (N_out *
                                                                    N_out)) +
                                                                    (K *
                                                                    nSubjects))
                                                                    +
                                                                    (nSubjects
                                                                    * K)) +
                                                                    (nSubjects
                                                                    * K)) +
                                                                    (N *
                                                                    nCmt)) +
                                                                    N) + N) +
                                                                    N) +
                                                                    (N *
                                                                    N_out)) +
                                                                    (N *
                                                                    N_out)) +
                                                                    (N *
                                                                    N_out)) +
                                                                   N) + N) +
                                                                 N) + N);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + (K * K)) + K) +
      (K * nSubjects)) + (N_out * N_out)) + N_out);
      const size_t num_transformed = 
  (((((((((((K + (nSubjects * K)) + (nSubjects * nTheta)) + (N * nCmt)) + N)
          + nObsPK) + N) + N) + nObsPK) + (N * N_out)) + (nObsPK * N_out)) +
    (N_out * N_out));
      const size_t num_gen_quantities = ((((((((((((((((N_out
                                                                    * N_out)
                                                                    +
                                                                    (N_out *
                                                                    N_out)) +
                                                                    (K *
                                                                    nSubjects))
                                                                    +
                                                                    (nSubjects
                                                                    * K)) +
                                                                    (nSubjects
                                                                    * K)) +
                                                                    (N *
                                                                    nCmt)) +
                                                                    N) + N) +
                                                                    N) +
                                                                    (N *
                                                                    N_out)) +
                                                                    (N *
                                                                    N_out)) +
                                                                    (N *
                                                                    N_out)) +
                                                                   N) + N) +
                                                                 N) + N);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 12> names__{"CL_pop", "Q_pop",
      "VC_pop", "VP_pop", "ke0_pop", "ka_pop", "EC50_pop", "L", "omega",
      "etaStd", "L_out", "L_out_sigma"};
      const std::array<Eigen::Index, 12> constrain_param_sizes__{1, 1, 
       1, 1, 1, 1, 1, (K * K), K, (K * nSubjects), (N_out * N_out), N_out};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } using stan_model = joint_model_namespace::joint_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return joint_model_namespace::profiles__;
}

#endif


