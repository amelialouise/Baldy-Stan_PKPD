
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace effCpt_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 92> locations_array__ = 
{" (found before start of program)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 69, column 2 to column 21)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 70, column 2 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 71, column 2 to column 21)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 72, column 2 to column 21)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 73, column 2 to column 21)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 74, column 2 to column 22)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 75, column 2 to column 23)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 76, column 2 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 77, column 2 to column 28)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 81, column 2 to column 29)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 82, column 2 to column 34)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 83, column 2 to column 32)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 84, column 2 to column 37)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 85, column 2 to column 30)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 86, column 2 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 88, column 2 to line 89, column 42)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 91, column 2 to column 29)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 92, column 2 to column 30)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 93, column 2 to column 42)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 95, column 2 to column 23)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 96, column 2 to column 29)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 117, column 2 to column 22)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 118, column 2 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 120, column 2 to column 50)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 121, column 2 to column 56)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 102, column 4 to column 34)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 103, column 4 to column 32)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 104, column 4 to column 34)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 105, column 4 to column 34)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 106, column 4 to column 22)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 107, column 4 to column 23)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 108, column 4 to column 26)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 109, column 4 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 110, column 4 to column 29)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 112, column 4 to column 42)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 113, column 4 to column 44)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 52, column 2 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 53, column 2 to column 22)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 54, column 22 to column 26)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 54, column 2 to column 28)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 55, column 22 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 55, column 2 to column 26)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 56, column 21 to column 23)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 56, column 2 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 57, column 22 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 57, column 2 to column 26)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 58, column 23 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 58, column 2 to column 27)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 59, column 20 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 59, column 2 to column 31)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 60, column 9 to column 13)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 60, column 2 to column 23)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 64, column 9 to column 13)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 64, column 2 to column 23)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 65, column 2 to column 22)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 81, column 20 to column 22)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 82, column 20 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 83, column 20 to column 22)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 84, column 20 to column 24)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 85, column 20 to column 22)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 86, column 9 to column 11)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 117, column 16 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 118, column 19 to column 23)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 6, column 2 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 7, column 2 to column 27)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 8, column 2 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 9, column 2 to column 16)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 10, column 2 to column 30)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 11, column 2 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 12, column 2 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 13, column 2 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 14, column 2 to column 17)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 15, column 2 to column 19)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 17, column 2 to column 15)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 18, column 2 to column 50)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 20, column 5 to column 15)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 4, column 60 to line 22, column 6)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 28, column 4 to column 20)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 29, column 4 to column 28)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 31, column 4 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 32, column 11 to column 13)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 32, column 4 to column 25)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 36, column 5 to column 85)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 38, column 20 to column 58)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 38, column 2 to column 58)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 40, column 17 to column 40)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 40, column 2 to column 40)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 34, column 19 to line 41, column 5)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 34, column 4 to line 41, column 5)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 43, column 4 to column 18)",
 " (in '/home/tng/Documents/PremiersEssais/EffectCpt/effCpt.stan', line 26, column 61 to line 45, column 3)"};

struct effCptModel_functor__ {
  template <typename T0__, typename T1__, typename T4__, typename T5__,
            typename T6__, typename T7__, typename T8__, typename T9__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T4__>* = nullptr,
            stan::require_stan_scalar_t<T5__>* = nullptr,
            stan::require_stan_scalar_t<T6__>* = nullptr,
            stan::require_stan_scalar_t<T7__>* = nullptr,
            stan::require_stan_scalar_t<T8__>* = nullptr,
            stan::require_stan_scalar_t<T9__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, T1__, T4__, T5__, T6__,
                       stan::promote_args_t<T7__, T8__, T9__>>, -1, -1>
  operator()(const std::vector<T0__>& time, const std::vector<T1__>& amt,
             const std::vector<int>& cmt, const std::vector<int>& evid,
             const T4__& CL, const T5__& Q, const T6__& V1, const T7__& V2,
             const T8__& ka, const T9__& ke0, std::ostream* pstream__) const;
};
struct expMatSolve_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__, typename T6__, typename T7__,
            typename T8__, stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_col_vector_t<T2__>* = nullptr,
            stan::require_stan_scalar_t<T3__>* = nullptr,
            stan::require_stan_scalar_t<T4__>* = nullptr,
            stan::require_stan_scalar_t<T5__>* = nullptr,
            stan::require_stan_scalar_t<T6__>* = nullptr,
            stan::require_stan_scalar_t<T7__>* = nullptr,
            stan::require_stan_scalar_t<T8__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>, T3__, T4__,
                       stan::promote_args_t<T5__, T6__, T7__, T8__>>, -1, 1>
  operator()(const T0__& t0, const T1__& t, const T2__& init, const T3__& CL,
             const T4__& Q, const T5__& V1, const T6__& V2, const T7__& ka,
             const T8__& ke0, std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__, stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_col_vector_t<T2__>* = nullptr,
          stan::require_stan_scalar_t<T3__>* = nullptr,
          stan::require_stan_scalar_t<T4__>* = nullptr,
          stan::require_stan_scalar_t<T5__>* = nullptr,
          stan::require_stan_scalar_t<T6__>* = nullptr,
          stan::require_stan_scalar_t<T7__>* = nullptr,
          stan::require_stan_scalar_t<T8__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>, T3__, T4__,
                     stan::promote_args_t<T5__, T6__, T7__, T8__>>, -1, 1>
  expMatSolve(const T0__& t0, const T1__& t, const T2__& init_arg__,
              const T3__& CL, const T4__& Q, const T5__& V1, const T6__& V2,
              const T7__& ka, const T8__& ke0, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>, T3__,
                                 T4__,
                                 stan::promote_args_t<T5__, T6__, T7__, T8__>>;
    int current_statement__ = 0; 
    const auto& init = stan::math::to_ref(init_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      Eigen::Matrix<local_scalar_t__, -1, -1> K =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(4, 4, DUMMY_VAR__);
      current_statement__ = 65;
      stan::model::assign(K, stan::math::rep_matrix(0, 4, 4),
        "assigning variable K");
      current_statement__ = 66;
      stan::model::assign(K, -ka,
        "assigning variable K", stan::model::index_uni(1),
                                  stan::model::index_uni(1));
      current_statement__ = 67;
      stan::model::assign(K, ka,
        "assigning variable K", stan::model::index_uni(2),
                                  stan::model::index_uni(1));
      current_statement__ = 68;
      stan::model::assign(K, -((CL / V1) + (Q / V1)),
        "assigning variable K", stan::model::index_uni(2),
                                  stan::model::index_uni(2));
      current_statement__ = 69;
      stan::model::assign(K, (Q / V2),
        "assigning variable K", stan::model::index_uni(2),
                                  stan::model::index_uni(3));
      current_statement__ = 70;
      stan::model::assign(K, (Q / V1),
        "assigning variable K", stan::model::index_uni(3),
                                  stan::model::index_uni(2));
      current_statement__ = 71;
      stan::model::assign(K, (-Q / V2),
        "assigning variable K", stan::model::index_uni(3),
                                  stan::model::index_uni(3));
      current_statement__ = 72;
      stan::model::assign(K, ke0,
        "assigning variable K", stan::model::index_uni(4),
                                  stan::model::index_uni(2));
      current_statement__ = 73;
      stan::model::assign(K, -ke0,
        "assigning variable K", stan::model::index_uni(4),
                                  stan::model::index_uni(4));
      Eigen::Matrix<local_scalar_t__, -1, 1> x =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(4, DUMMY_VAR__);
      current_statement__ = 75;
      stan::model::assign(x,
        stan::math::multiply(
          stan::math::matrix_exp(stan::math::multiply((t - t0), K)),
          stan::math::to_vector(init)), "assigning variable x");
      current_statement__ = 76;
      return x;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T4__, typename T5__,
          typename T6__, typename T7__, typename T8__, typename T9__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T4__>* = nullptr,
          stan::require_stan_scalar_t<T5__>* = nullptr,
          stan::require_stan_scalar_t<T6__>* = nullptr,
          stan::require_stan_scalar_t<T7__>* = nullptr,
          stan::require_stan_scalar_t<T8__>* = nullptr,
          stan::require_stan_scalar_t<T9__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, T1__, T4__, T5__, T6__,
                     stan::promote_args_t<T7__, T8__, T9__>>, -1, -1>
  effCptModel(const std::vector<T0__>& time, const std::vector<T1__>& amt,
              const std::vector<int>& cmt, const std::vector<int>& evid,
              const T4__& CL, const T5__& Q, const T6__& V1, const T7__& V2,
              const T8__& ka, const T9__& ke0, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, T1__, T4__, T5__, T6__,
                                 stan::promote_args_t<T7__, T8__, T9__>>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> init =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(4, DUMMY_VAR__);
      current_statement__ = 79;
      stan::model::assign(init, stan::math::rep_vector(0, 4),
        "assigning variable init");
      int nt = std::numeric_limits<int>::min();
      current_statement__ = 80;
      nt = stan::math::size(time);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("result", "nt", nt);
      Eigen::Matrix<local_scalar_t__, -1, -1> result =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(nt, 4,
           DUMMY_VAR__);
      current_statement__ = 89;
      for (int i = 1; i <= nt; ++i) {
        current_statement__ = 83;
        stan::model::assign(init,
          expMatSolve(
            stan::model::rvalue(time, "time",
              stan::model::index_uni(stan::math::max(1, (i - 1)))),
            stan::model::rvalue(time, "time", stan::model::index_uni(i)),
            stan::model::deep_copy(init), CL, Q, V1, V2, ka, ke0, pstream__),
          "assigning variable init");
        current_statement__ = 85;
        if (stan::math::logical_eq(
              stan::model::rvalue(evid, "evid", stan::model::index_uni(i)),
              1)) {
          current_statement__ = 84;
          stan::model::assign(init,
            (stan::model::rvalue(init, "init",
               stan::model::index_uni(stan::model::rvalue(cmt, "cmt",
                                        stan::model::index_uni(i)))) +
              stan::model::rvalue(amt, "amt", stan::model::index_uni(i))),
            "assigning variable init", stan::model::index_uni(stan::model::rvalue(
                                                                cmt, "cmt",
                                                                stan::model::index_uni(i))));
        } 
        current_statement__ = 87;
        for (int j = 1; j <= 4; ++j) {
          current_statement__ = 86;
          stan::model::assign(result,
            stan::model::rvalue(init, "init", stan::model::index_uni(j)),
            "assigning variable result", stan::model::index_uni(i),
                                           stan::model::index_uni(j));
        }
      }
      current_statement__ = 90;
      return result;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T4__, typename T5__,
          typename T6__, typename T7__, typename T8__, typename T9__,
          stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T4__>*,
          stan::require_stan_scalar_t<T5__>*,
          stan::require_stan_scalar_t<T6__>*,
          stan::require_stan_scalar_t<T7__>*,
          stan::require_stan_scalar_t<T8__>*,
          stan::require_stan_scalar_t<T9__>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T4__, T5__, T6__,
                     stan::promote_args_t<T7__, T8__, T9__>>, -1, -1>
effCptModel_functor__::operator()(const std::vector<T0__>& time,
                                  const std::vector<T1__>& amt,
                                  const std::vector<int>& cmt,
                                  const std::vector<int>& evid,
                                  const T4__& CL, const T5__& Q,
                                  const T6__& V1, const T7__& V2,
                                  const T8__& ka, const T9__& ke0,
                                  std::ostream* pstream__)  const
{
  return effCptModel(time, amt, cmt, evid, CL, Q, V1, V2, ka, ke0, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__, stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_col_vector_t<T2__>*,
          stan::require_stan_scalar_t<T3__>*,
          stan::require_stan_scalar_t<T4__>*,
          stan::require_stan_scalar_t<T5__>*,
          stan::require_stan_scalar_t<T6__>*,
          stan::require_stan_scalar_t<T7__>*,
          stan::require_stan_scalar_t<T8__>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>, T3__, T4__,
                     stan::promote_args_t<T5__, T6__, T7__, T8__>>, -1, 1>
expMatSolve_functor__::operator()(const T0__& t0, const T1__& t,
                                  const T2__& init, const T3__& CL,
                                  const T4__& Q, const T5__& V1,
                                  const T6__& V2, const T7__& ka,
                                  const T8__& ke0, std::ostream* pstream__) 
const
{
  return expMatSolve(t0, t, init, CL, Q, V1, V2, ka, ke0, pstream__);
}

 class effCpt_model final : public model_base_crtp<effCpt_model> {

 private:
  int nt;
  int nObs;
  std::vector<int> iObs;
  std::vector<double> amt;
  std::vector<int> cmt;
  std::vector<int> evid;
  std::vector<double> time;
  Eigen::Matrix<double, -1, 1> cObs__;
  Eigen::Matrix<double, -1, 1> respObs__;
  Eigen::Matrix<double, -1, 1> logCObs__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> cObs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> respObs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> logCObs{nullptr, 0};
 
 public:
  ~effCpt_model() { }
  
  inline std::string model_name() const final { return "effCpt_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = "};
  }
  
  
  effCpt_model(stan::io::var_context& context__,
               unsigned int random_seed__ = 0,
               std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "effCpt_model_namespace::effCpt_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 37;
      context__.validate_dims("data initialization","nt","int",
           std::vector<size_t>{});
      nt = std::numeric_limits<int>::min();
      
      
      current_statement__ = 37;
      nt = context__.vals_i("nt")[(1 - 1)];
      current_statement__ = 37;
      stan::math::check_greater_or_equal(function__, "nt", nt, 1);
      current_statement__ = 38;
      context__.validate_dims("data initialization","nObs","int",
           std::vector<size_t>{});
      nObs = std::numeric_limits<int>::min();
      
      
      current_statement__ = 38;
      nObs = context__.vals_i("nObs")[(1 - 1)];
      current_statement__ = 38;
      stan::math::check_greater_or_equal(function__, "nObs", nObs, 1);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("iObs", "nObs", nObs);
      current_statement__ = 40;
      context__.validate_dims("data initialization","iObs","int",
           std::vector<size_t>{static_cast<size_t>(nObs)});
      iObs = std::vector<int>(nObs, std::numeric_limits<int>::min());
      
      
      current_statement__ = 40;
      iObs = context__.vals_i("iObs");
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "iObs", iObs, 1);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("amt", "nt", nt);
      current_statement__ = 42;
      context__.validate_dims("data initialization","amt","double",
           std::vector<size_t>{static_cast<size_t>(nt)});
      amt = 
        std::vector<double>(nt, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 42;
      amt = context__.vals_r("amt");
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "amt", amt, 0);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("cmt", "nt", nt);
      current_statement__ = 44;
      context__.validate_dims("data initialization","cmt","int",
           std::vector<size_t>{static_cast<size_t>(nt)});
      cmt = std::vector<int>(nt, std::numeric_limits<int>::min());
      
      
      current_statement__ = 44;
      cmt = context__.vals_i("cmt");
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "cmt", cmt, 1);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("evid", "nt", nt);
      current_statement__ = 46;
      context__.validate_dims("data initialization","evid","int",
           std::vector<size_t>{static_cast<size_t>(nt)});
      evid = std::vector<int>(nt, std::numeric_limits<int>::min());
      
      
      current_statement__ = 46;
      evid = context__.vals_i("evid");
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "evid", evid, 0);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("time", "nt", nt);
      current_statement__ = 48;
      context__.validate_dims("data initialization","time","double",
           std::vector<size_t>{static_cast<size_t>(nt)});
      time = 
        std::vector<double>(nt, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 48;
      time = context__.vals_r("time");
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "time", time, 0);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("cObs", "nObs", nObs);
      current_statement__ = 50;
      context__.validate_dims("data initialization","cObs","double",
           std::vector<size_t>{static_cast<size_t>(nObs)});
      cObs__ = 
        Eigen::Matrix<double, -1, 1>::Constant(nObs,
          std::numeric_limits<double>::quiet_NaN());
      new (&cObs) Eigen::Map<Eigen::Matrix<double, -1, 1>>(cObs__.data(), nObs);
        
      
      {
        std::vector<local_scalar_t__> cObs_flat__;
        current_statement__ = 50;
        cObs_flat__ = context__.vals_r("cObs");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= nObs; ++sym1__) {
          current_statement__ = 50;
          stan::model::assign(cObs, cObs_flat__[(pos__ - 1)],
            "assigning variable cObs", stan::model::index_uni(sym1__));
          current_statement__ = 50;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "cObs", cObs, 0);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("respObs", "nObs", nObs);
      current_statement__ = 52;
      context__.validate_dims("data initialization","respObs","double",
           std::vector<size_t>{static_cast<size_t>(nObs)});
      respObs__ = 
        Eigen::Matrix<double, -1, 1>::Constant(nObs,
          std::numeric_limits<double>::quiet_NaN());
      new (&respObs) Eigen::Map<Eigen::Matrix<double, -1, 1>>(respObs__.data(), nObs);
        
      
      {
        std::vector<local_scalar_t__> respObs_flat__;
        current_statement__ = 52;
        respObs_flat__ = context__.vals_r("respObs");
        current_statement__ = 52;
        pos__ = 1;
        current_statement__ = 52;
        for (int sym1__ = 1; sym1__ <= nObs; ++sym1__) {
          current_statement__ = 52;
          stan::model::assign(respObs, respObs_flat__[(pos__ - 1)],
            "assigning variable respObs", stan::model::index_uni(sym1__));
          current_statement__ = 52;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 53;
      stan::math::validate_non_negative_index("logCObs", "nObs", nObs);
      current_statement__ = 54;
      logCObs__ = 
        Eigen::Matrix<double, -1, 1>::Constant(nObs,
          std::numeric_limits<double>::quiet_NaN());
      new (&logCObs) Eigen::Map<Eigen::Matrix<double, -1, 1>>(logCObs__.data(), nObs);
        
      
      current_statement__ = 55;
      stan::model::assign(logCObs, stan::math::log(cObs),
        "assigning variable logCObs");
      current_statement__ = 56;
      stan::math::validate_non_negative_index("cHat", "nt", nt);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("cHatObs", "nObs", nObs);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("respHat", "nt", nt);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("respHatObs", "nObs", nObs);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("ceHat", "nt", nt);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("x", "nt", nt);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("cObsPred", "nObs", nObs);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("respObsPred", "nObs", nObs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "effCpt_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ CL = DUMMY_VAR__;
      current_statement__ = 1;
      CL = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      local_scalar_t__ Q = DUMMY_VAR__;
      current_statement__ = 2;
      Q = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      local_scalar_t__ V1 = DUMMY_VAR__;
      current_statement__ = 3;
      V1 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      local_scalar_t__ V2 = DUMMY_VAR__;
      current_statement__ = 4;
      V2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      local_scalar_t__ ka = DUMMY_VAR__;
      current_statement__ = 5;
      ka = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      local_scalar_t__ ke0 = DUMMY_VAR__;
      current_statement__ = 6;
      ke0 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      local_scalar_t__ EC50 = DUMMY_VAR__;
      current_statement__ = 7;
      EC50 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 8;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ sigmaResp = DUMMY_VAR__;
      current_statement__ = 9;
      sigmaResp = in__.template read_constrain_lb<local_scalar_t__, 
                    jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> cHat =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(nt, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> cHatObs =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(nObs, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> respHat =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(nt, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> respHatObs =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(nObs, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> ceHat =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(nt, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, -1> x =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(nt, 4,
           DUMMY_VAR__);
      current_statement__ = 16;
      stan::model::assign(x,
        effCptModel(time, amt, cmt, evid, CL, Q, V1, V2, ka, ke0, pstream__),
        "assigning variable x");
      current_statement__ = 17;
      stan::model::assign(cHat,
        stan::math::elt_divide(
          stan::math::multiply(1000,
            stan::model::rvalue(x, "x",
              stan::model::index_omni(), stan::model::index_uni(2))), V1),
        "assigning variable cHat");
      current_statement__ = 18;
      stan::model::assign(ceHat,
        stan::math::elt_divide(
          stan::math::multiply(1000,
            stan::model::rvalue(x, "x",
              stan::model::index_omni(), stan::model::index_uni(4))), V1),
        "assigning variable ceHat");
      current_statement__ = 19;
      stan::model::assign(respHat,
        stan::math::elt_divide(stan::math::multiply(100, ceHat),
          stan::math::add(EC50, ceHat)), "assigning variable respHat");
      current_statement__ = 20;
      stan::model::assign(cHatObs,
        stan::model::rvalue(cHat, "cHat", stan::model::index_multi(iObs)),
        "assigning variable cHatObs");
      current_statement__ = 21;
      stan::model::assign(respHatObs,
        stan::model::rvalue(respHat, "respHat",
          stan::model::index_multi(iObs)), "assigning variable respHatObs");
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "cHat", cHat, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "cHatObs", cHatObs, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "respHat", respHat, 0);
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "respHatObs",
                                            respHatObs, 0);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "ceHat", ceHat, 0);
      {
        current_statement__ = 26;
        lp_accum__.add(
          stan::math::lognormal_lpdf<propto__>(CL, stan::math::log(10), 0.25));
        current_statement__ = 27;
        lp_accum__.add(
          stan::math::lognormal_lpdf<propto__>(Q, stan::math::log(15), 0.5));
        current_statement__ = 28;
        lp_accum__.add(
          stan::math::lognormal_lpdf<propto__>(V1, stan::math::log(35), 0.25));
        current_statement__ = 29;
        lp_accum__.add(
          stan::math::lognormal_lpdf<propto__>(V2, stan::math::log(105), 0.5));
        current_statement__ = 30;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(ka, 0, 5));
        current_statement__ = 31;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(ke0, 0, 2));
        current_statement__ = 32;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(EC50, 0, 200));
        current_statement__ = 33;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma, 0, 2));
        current_statement__ = 34;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigmaResp, 0, 5));
        current_statement__ = 35;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(logCObs,
            stan::math::log(cHatObs), sigma));
        current_statement__ = 36;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(respObs, respHatObs, sigmaResp));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "effCpt_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double CL = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      CL = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      double Q = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      Q = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      double V1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      V1 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      double V2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      V2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      double ka = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      ka = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      double ke0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      ke0 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      double EC50 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      EC50 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double sigmaResp = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      sigmaResp = in__.template read_constrain_lb<local_scalar_t__, 
                    jacobian__>(0, lp__);
      Eigen::Matrix<double, -1, 1> cHat =
         Eigen::Matrix<double, -1, 1>::Constant(nt,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> cHatObs =
         Eigen::Matrix<double, -1, 1>::Constant(nObs,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> respHat =
         Eigen::Matrix<double, -1, 1>::Constant(nt,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> respHatObs =
         Eigen::Matrix<double, -1, 1>::Constant(nObs,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> ceHat =
         Eigen::Matrix<double, -1, 1>::Constant(nt,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> x =
         Eigen::Matrix<double, -1, -1>::Constant(nt, 4,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(CL);
      out__.write(Q);
      out__.write(V1);
      out__.write(V2);
      out__.write(ka);
      out__.write(ke0);
      out__.write(EC50);
      out__.write(sigma);
      out__.write(sigmaResp);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 16;
      stan::model::assign(x,
        effCptModel(time, amt, cmt, evid, CL, Q, V1, V2, ka, ke0, pstream__),
        "assigning variable x");
      current_statement__ = 17;
      stan::model::assign(cHat,
        stan::math::elt_divide(
          stan::math::multiply(1000,
            stan::model::rvalue(x, "x",
              stan::model::index_omni(), stan::model::index_uni(2))), V1),
        "assigning variable cHat");
      current_statement__ = 18;
      stan::model::assign(ceHat,
        stan::math::elt_divide(
          stan::math::multiply(1000,
            stan::model::rvalue(x, "x",
              stan::model::index_omni(), stan::model::index_uni(4))), V1),
        "assigning variable ceHat");
      current_statement__ = 19;
      stan::model::assign(respHat,
        stan::math::elt_divide(stan::math::multiply(100, ceHat),
          stan::math::add(EC50, ceHat)), "assigning variable respHat");
      current_statement__ = 20;
      stan::model::assign(cHatObs,
        stan::model::rvalue(cHat, "cHat", stan::model::index_multi(iObs)),
        "assigning variable cHatObs");
      current_statement__ = 21;
      stan::model::assign(respHatObs,
        stan::model::rvalue(respHat, "respHat",
          stan::model::index_multi(iObs)), "assigning variable respHatObs");
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "cHat", cHat, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "cHatObs", cHatObs, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "respHat", respHat, 0);
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "respHatObs",
                                            respHatObs, 0);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "ceHat", ceHat, 0);
      if (emit_transformed_parameters__) {
        out__.write(cHat);
        out__.write(cHatObs);
        out__.write(respHat);
        out__.write(respHatObs);
        out__.write(ceHat);
        out__.write(x);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> cObsPred =
         std::vector<double>(nObs, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> respObsPred =
         std::vector<double>(nObs, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 24;
      stan::model::assign(cObsPred,
        stan::math::exp(
          stan::math::normal_rng(stan::math::log(cHatObs), sigma, base_rng__)),
        "assigning variable cObsPred");
      current_statement__ = 25;
      stan::model::assign(respObsPred,
        stan::math::exp(
          stan::math::normal_rng(stan::math::log(respHatObs), sigma,
            base_rng__)), "assigning variable respObsPred");
      out__.write(cObsPred);
      out__.write(respObsPred);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ CL = DUMMY_VAR__;
      CL = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, CL);
      local_scalar_t__ Q = DUMMY_VAR__;
      Q = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, Q);
      local_scalar_t__ V1 = DUMMY_VAR__;
      V1 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, V1);
      local_scalar_t__ V2 = DUMMY_VAR__;
      V2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, V2);
      local_scalar_t__ ka = DUMMY_VAR__;
      ka = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, ka);
      local_scalar_t__ ke0 = DUMMY_VAR__;
      ke0 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, ke0);
      local_scalar_t__ EC50 = DUMMY_VAR__;
      EC50 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, EC50);
      local_scalar_t__ sigma = DUMMY_VAR__;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      local_scalar_t__ sigmaResp = DUMMY_VAR__;
      sigmaResp = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigmaResp);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"CL", "Q", "V1", "V2", "ka", "ke0",
      "EC50", "sigma", "sigmaResp", "cHat", "cHatObs", "respHat",
      "respHatObs", "ceHat", "x", "cObsPred", "respObsPred"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(nt)},
      std::vector<size_t>{static_cast<size_t>(nObs)},
      std::vector<size_t>{static_cast<size_t>(nt)},
      std::vector<size_t>{static_cast<size_t>(nObs)},
      std::vector<size_t>{static_cast<size_t>(nt)},
      std::vector<size_t>{static_cast<size_t>(nt), static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(nObs)},
      std::vector<size_t>{static_cast<size_t>(nObs)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "CL");
    param_names__.emplace_back(std::string() + "Q");
    param_names__.emplace_back(std::string() + "V1");
    param_names__.emplace_back(std::string() + "V2");
    param_names__.emplace_back(std::string() + "ka");
    param_names__.emplace_back(std::string() + "ke0");
    param_names__.emplace_back(std::string() + "EC50");
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "sigmaResp");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cHat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cHatObs" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "respHat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "respHatObs" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ceHat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nt; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= nObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cObsPred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "respObsPred" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "CL");
    param_names__.emplace_back(std::string() + "Q");
    param_names__.emplace_back(std::string() + "V1");
    param_names__.emplace_back(std::string() + "V2");
    param_names__.emplace_back(std::string() + "ka");
    param_names__.emplace_back(std::string() + "ke0");
    param_names__.emplace_back(std::string() + "EC50");
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "sigmaResp");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cHat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cHatObs" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "respHat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "respHatObs" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ceHat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nt; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= nObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cObsPred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "respObsPred" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"CL\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Q\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"V1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"V2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ka\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ke0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"EC50\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigmaResp\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"cHat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nt) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cHatObs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nObs) + "},\"block\":\"transformed_parameters\"},{\"name\":\"respHat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nt) + "},\"block\":\"transformed_parameters\"},{\"name\":\"respHatObs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nObs) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ceHat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nt) + "},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nt) + ",\"cols\":" + std::to_string(4) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cObsPred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nObs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"respObsPred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nObs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"CL\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Q\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"V1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"V2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ka\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ke0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"EC50\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigmaResp\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"cHat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nt) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cHatObs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nObs) + "},\"block\":\"transformed_parameters\"},{\"name\":\"respHat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nt) + "},\"block\":\"transformed_parameters\"},{\"name\":\"respHatObs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nObs) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ceHat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nt) + "},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nt) + ",\"cols\":" + std::to_string(4) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cObsPred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nObs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"respObsPred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nObs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = 
  (((((nt + nObs) + nt) + nObs) + nt) + (nt * 4));
      const size_t num_gen_quantities = 
  (nObs + nObs);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = 
  (((((nt + nObs) + nt) + nObs) + nt) + (nt * 4));
      const size_t num_gen_quantities = 
  (nObs + nObs);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 9> names__{"CL", "Q", "V1", "V2",
      "ka", "ke0", "EC50", "sigma", "sigmaResp"};
      const std::array<Eigen::Index, 9> constrain_param_sizes__{1, 1, 
       1, 1, 1, 1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } using stan_model = effCpt_model_namespace::effCpt_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return effCpt_model_namespace::profiles__;
}

#endif


